{"version":3,"sources":["util/ModelUtils.ts","config/AppConfig.ts","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["validate","value","searchQuery","toLowerCase","includes","routingToElements","routing","config","console","log","showFilters","viewType","elements","nodes","Map","routesMap","incomingEdgesCount","getUniqueRequests","filters","requests","Set","forEach","filter","it","add","putNode","node","existed","get","id","set","startsWith","adapter","hasSourceFilters","name","sourceFilters","length","hasDestinationFilters","destinationFilters","getDestinationFilters","rootId","parentId","putEdge","edge","map","source","array","target","count","push","findFilters","request","current","result","putComplexEdge","newSource","newTarget","newRequest","sourceId","targetId","currentId","startId","edgeLabel","blockId","tempId","requestRenamingLike","findIndex","findRequestRenamingLike","hasRequestRenamingLike","filterName","index","filterId","label","implicitLabel","buildOutgoingPath","buildIncomingPath","defineAdapter","defineApplication","ruleIncomingRequests","rules","rule","Object","entries","entry","adapterName","requestName","has","requestId","group","destination","application","validateRule","size","Math","min","classes","data","parent","css","width","height","targets","edges","undefined","stylesheet","selector","style","Cytoscape","use","CoseBilkentLayout","EulerLayout","KlayLayout","App","action","bound","observer","core","e","this","setTimeout","formatLayout","JSON","stringify","parse","error","layout","idealEdgeLength","animate","animationEasing","animationDuration","randomize","run","className","cy","setCore","onClick","formatJson","type","placeholder","onChange","onChangeSearchQuery","onChangeViewType","React","Component","observable","computed","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.94a99078.chunk.js","sourcesContent":["import Rule from \"../model/Rule\";\nimport Cytoscape from \"cytoscape\";\nimport Routing, {Filters} from \"../model/Routing\";\nimport Edge from \"../model/Edge\";\nimport Node from \"../model/Node\";\nimport Filter from \"../model/Filter\";\n\nfunction validate(value: string, searchQuery: string): boolean {\n    return value.toLowerCase().includes(searchQuery.toLowerCase())\n}\n\nexport function validateRule(rule: Rule, searchQuery: string): boolean {\n    if (rule.source && validate(rule.source, searchQuery)) {\n        return true;\n    }\n    if (rule.request && validate(rule.request, searchQuery)) {\n        return true;\n    }\n    if (rule.group && validate(rule.group, searchQuery)) {\n        return true;\n    }\n    if (rule.destination && validate(rule.destination, searchQuery)) {\n        return true;\n    }\n    if (rule.application && validate(rule.application, searchQuery)) {\n        return true;\n    }\n    return false;\n}\n\ninterface ConversionConfig {\n    searchQuery: string,\n    viewType: string;\n}\n\nexport function routingToElements(routing: Routing, config: ConversionConfig): Cytoscape.ElementDefinition[] {\n    console.log(\"Converting the routing JSON to graph elements is started\");\n    const showFilters = config.viewType == \"complex\";\n    const elements: Cytoscape.ElementDefinition[] = [];\n    const nodes = new Map<string, Node>();\n    const routesMap = new Map<string, Map<string, Edge[]>>();\n    const incomingEdgesCount = new Map<string, number>();\n\n    function getSourceFilters(adapter: string): Filter[] {\n        return ((routing.sourceFilters || {})[adapter] || []);\n    }\n\n    function getDestinationFilters(adapter: string): Filter[] {\n        return ((routing.destinationFilters || {})[adapter] || []);\n    }\n\n    function getUniqueRequests(filters: Filter[]): Set<string> {\n        const requests = new Set<string>();\n        filters.forEach(filter => {\n            filter.requests.forEach(it => requests.add(it));\n        });\n        return requests;\n    }\n\n    function putNode(node: Node): Node {\n        const existed = nodes.get(node.id);\n        if (existed != null) {\n            return existed;\n        }\n        nodes.set(node.id, node);\n        if (!node.id.startsWith(\"adapter_\")) {\n            return node;\n        }\n        if (!showFilters) {\n            return node;\n        }\n        const hasSourceFilters = getSourceFilters(node.name).length > 0;\n        const hasDestinationFilters = getDestinationFilters(node.name).length > 0;\n        const hasAnyFilters = hasSourceFilters || hasDestinationFilters;\n        if (hasAnyFilters) {\n            let rootId = \"root_\" + node.id;\n            putNode({id: rootId, name: node.name, parentId: node.id});\n            node.rootId = rootId;\n            // if (hasSourceFilters) {\n            //     const blockId = \"block_outgoing_\" + node.id;\n            //     putNode({id: blockId, name: \"[filterRequest]\", parentId: node.id});\n            // }\n            // if (hasDestinationFilters) {\n            //     const blockId = \"block_incoming_\" + node.id;\n            //     putNode({id: blockId, name: \"[filterResponse]\", parentId: node.id});\n            // }\n        }\n        return node;\n    }\n\n    const putEdge = (edge: Edge): void => {\n        let map = routesMap.get(edge.source);\n        if (map == null) {\n            map = new Map<string, Edge[]>();\n            routesMap.set(edge.source, map);\n        }\n        let array = map.get(edge.target);\n        let count = incomingEdgesCount.get(edge.target) || 0;\n        if (array == null) {\n            array = [];\n            map.set(edge.target, array)\n        }\n        incomingEdgesCount.set(edge.target, count + 1);\n        array.push(edge);\n    };\n    const findFilters = (adapter: string, request: string, filters?: Filters): string[] => {\n        const current = (filters || {})[adapter] || [];\n        const result: string[] = [];\n        current.forEach(filter => {\n            if (filter.requests.includes(\"*\") || filter.requests.includes(request)) {\n                filter.filters.forEach(it => result.push(it))\n            }\n        });\n        return result;\n    };\n    const putComplexEdge = (newSource: Node, newTarget: Node, newRequest: string): void => {\n        // if (!validate(newSource.name, config.searchQuery) && !validate(newTarget.name, config.searchQuery) && !validate(newRequest, config.searchQuery)) {\n        //     return;\n        // }\n        const source = putNode(newSource);\n        const target = putNode(newTarget);\n        const sourceId = source.rootId || source.id;\n        const targetId = target.rootId || target.id;\n        let currentId = sourceId;\n\n        function calculateFiltersCount(filters: string[]): Map<string, number> {\n            let filterCount = new Map<string, number>();\n            filters.forEach(filterName => {\n                let index = filterCount.get(filterName);\n                if (index == null) {\n                    index = 1;\n                } else {\n                    index++;\n                }\n                filterCount.set(filterName, index);\n            });\n            return filterCount;\n        }\n\n        function findRequestRenamingLike(filters: string[]): number {\n            return filters.findIndex(it => it.toLowerCase().includes(\"requestRenaming\".toLowerCase()));\n        }\n\n        function buildOutgoingPath(startId: string, sourceFilters: string[], destinationFilters: string[], edgeLabel: string): string {\n            const filters: string[] = sourceFilters;//[...sourceFilters, ...destinationFilters];\n            const blockId = \"block_outgoing_\" + source.id;\n            if (filters.length > 0) {\n                putNode({id: blockId, name: \"Outgoing Filters\", parentId: source.id});\n            }\n            let tempId = startId;\n            const requestRenamingLike = findRequestRenamingLike(filters);\n            const hasRequestRenamingLike = requestRenamingLike >= 0;\n            filters.forEach((filterName, index) => {\n                const filterId = \"filter_outgoing_\" + source.id + \"_\" + filterName + \"_\" + index;\n                putNode({id: filterId, name: filterName, parentId: blockId});\n                if (!hasRequestRenamingLike || requestRenamingLike >= index) {\n                    putEdge({source: tempId, target: filterId, label: edgeLabel});\n                } else {\n                    putEdge({source: tempId, target: filterId, label: edgeLabel, implicitLabel: true});\n                }\n                tempId = filterId;\n                ++index;\n            });\n            return tempId;\n        }\n\n        function buildIncomingPath(startId: string, sourceFilters: string[], destinationFilters: string[], edgeLabel: string): string {\n            const filters = destinationFilters;//[...sourceFilters, ...destinationFilters].reverse();\n            let blockId = \"block_incoming_\" + target.id;\n            if (filters.length > 0) {\n                putNode({id: blockId, name: \"Incoming Filters\", parentId: target.id});\n            }\n            let tempId = startId;\n            filters.forEach((filterName, index) => {\n                let filterId = \"filter_incoming_\" + target.id + \"_\" + filterName + \"_\" + index;\n                putNode({id: filterId, name: filterName, parentId: blockId});\n                putEdge({source: tempId, target: filterId, label: edgeLabel});\n                tempId = filterId\n            });\n            return tempId;\n        }\n\n        if (source.rootId) {\n            const sourceFilters = findFilters(source.name, newRequest, routing.sourceFilters);\n            const destinationFilters = findFilters(source.name, newRequest, routing.destinationFilters);\n            currentId = buildOutgoingPath(currentId, sourceFilters, destinationFilters, newRequest);\n        }\n        if (target.rootId) {\n            const sourceFilters = findFilters(target.name, newRequest, routing.sourceFilters);\n            const destinationFilters = findFilters(target.name, newRequest, routing.destinationFilters);\n            currentId = buildIncomingPath(currentId, sourceFilters, destinationFilters, newRequest);\n        }\n        putEdge({source: currentId, target: targetId, label: newRequest});\n    };\n\n    function defineAdapter(name: string): Node {\n        return {\n            id: \"adapter_\" + name,\n            name: name\n        }\n    }\n\n    function defineApplication(name: string): Node {\n        return {\n            id: \"application_\" + name,\n            name: name\n        }\n    }\n\n    const ruleIncomingRequests = new Set<string>();\n    routing.rules?.forEach(rule => {\n        if (rule.request) {\n            ruleIncomingRequests.add(rule.request);\n        }\n    });\n    Object.entries(routing.sourceFilters || {}).forEach(entry => {\n        const [adapterName, filters] = entry;\n        const adapter = defineAdapter(adapterName);\n        getUniqueRequests(filters).forEach(requestName => {\n            if (!ruleIncomingRequests.has(requestName)) {\n                if (!validate(adapterName, config.searchQuery) && !validate(requestName, config.searchQuery)) {\n                    return;\n                }\n                const requestId = \"request_outgoing_\" + adapter.id + \"_\" + requestName;\n                putComplexEdge(adapter, {id: requestId, name: requestName}, requestName);\n            }\n        });\n    });\n    Object.entries(routing.destinationFilters || {}).forEach(entry => {\n        const [adapterName, filters] = entry;\n        const adapter = defineAdapter(adapterName);\n        getUniqueRequests(filters).forEach(requestName => {\n            if (!ruleIncomingRequests.has(requestName)) {\n                if (!validate(adapterName, config.searchQuery) && !validate(requestName, config.searchQuery)) {\n                    return;\n                }\n                const requestId = \"request_incoming_\" + adapter.id + \"_\" + requestName;\n                putComplexEdge({id: requestId, name: requestName}, adapter, requestName);\n            }\n        });\n    });\n    routing.rules?.forEach(rule => {\n        if (!validateRule(rule, config.searchQuery)) {\n            return;\n        }\n        // edges\n        const request = rule.request || \"\";\n        if (rule.source && rule.destination) {\n            putComplexEdge(defineAdapter(rule.source), defineAdapter(rule.destination), request);\n        }\n        if (rule.source && rule.application) {\n            putComplexEdge(defineAdapter(rule.source), defineApplication(rule.application), request);\n        }\n        if (!rule.source) {\n            if (rule.destination) {\n                if (rule.group) {\n                    const adapter = defineAdapter(rule.destination);\n                    putComplexEdge({\n                        id: \"group_\" + rule.group,\n                        name: rule.group\n                    }, adapter, request);\n                } else if (rule.request) {\n                    const adapter = defineAdapter(rule.destination);\n                    putComplexEdge({\n                        id: \"request_incoming_\" + adapter.id + \"_\" + rule.request,\n                        name: rule.request\n                    }, adapter, request);\n                }\n            } else if (rule.application) {\n                if (rule.group) {\n                    const application = defineApplication(rule.application);\n                    putComplexEdge({\n                        id: \"group_\" + rule.group,\n                        name: rule.group\n                    }, application, request);\n                } else if (rule.request) {\n                    const application = defineApplication(rule.application);\n                    putComplexEdge({\n                        id: \"request_incoming_\" + application.id + \"_\" + rule.request,\n                        name: rule.request\n                    }, application, request);\n                }\n            }\n        }\n    });\n    const calculateSize = (name: string): number => {\n        return Math.min((incomingEdgesCount.get(name) || 1) * 10 + 20, 100);\n    };\n    nodes.forEach(node => {\n        const size = calculateSize(node.id);\n        let defaultStyle = {};\n        let classes: string[] = [];\n        let label = node.name;\n        if (node.id.startsWith(\"adapter_\")) {\n            if (showFilters && node.rootId) {\n                classes = [\"block\", \"block-adapter\"];\n                label = \"\";\n            } else {\n                classes = [\"node\", \"node-adapter\"];\n            }\n        } else if (node.id.startsWith(\"request_\")) {\n            classes = [\"node-implicit\", \"node-request\"];\n            label = \"\";\n        } else if (node.id.startsWith(\"group_\")) {\n            classes = [\"node\", \"node-implicit\", \"node-group\"]\n        } else if (node.id.startsWith(\"application_\")) {\n            classes = [\"node\", \"node-application\"]\n        } else if (node.id.startsWith(\"block_\")) {\n            classes = [\"block\", \"block-filter-group\"];\n        } else if (node.id.startsWith(\"filter_\")) {\n            classes = [\"node\", \"node-filter\"];\n        } else if (node.id.startsWith(\"root_adapter_\")) {\n            classes = [\"node\", \"node-adapter\"];\n        }\n        elements.push({\n            data: {\n                id: node.id,\n                label: label,\n                parent: node.parentId\n            },\n            css: {\n                ...defaultStyle,\n                width: size,\n                height: size\n            },\n            classes: classes as any\n        })\n    });\n    routesMap.forEach((targets, source) => {\n        targets.forEach(edges => {\n            edges.forEach(edge => {\n                elements.push({\n                    data: {\n                        source: edge.source,\n                        target: edge.target,\n                        label: edge.label\n                    },\n                    classes: (edge.implicitLabel === true ? \"implicit_label\" : undefined)\n                })\n            })\n        });\n    });\n    console.log(\"Converting the routing JSON to graph elements is finished\");\n    return elements;\n}","export const stylesheet = [\n    {\n        selector: 'node',\n        style: {\n            label: 'data(label)',\n            \"font-size\": \"10px\",\n            'color': '#ecf0f1',\n            \"text-outline-color\": \"#34495e\",\n            'text-outline-width': 1,\n            \"text-valign\": \"center\",\n            \"text-halign\": \"center\",\n            \"border-width\": 0\n        }\n    },\n    {\n        selector: 'edge',\n        style: {\n            'label': 'data(label)',\n            'text-rotation': 'autorotate',\n            \"line-color\": \"#bdc3c7\",\n            width: 1,\n            \"font-size\": \"8px\",\n            'color': '#34495e',\n            \"arrow-scale\": 2,\n            \"mid-target-arrow-shape\": \"vee\",\n            \"target-arrow-shape\": \"vee\",\n            \"mid-target-arrow-color\": \"#2ecc71\",\n            \"target-arrow-color\": \"#2ecc71\",\n            \"target-distance-from-node\": \"5px\",\n            \"curve-style\": \"bezier\"\n        }\n    },\n    {\n        selector: ':parent',\n        style: {\n            'background-opacity': 0.1,\n            \"border-width\": 1,\n        }\n    },\n    {\n        selector: \".node\",\n        style: {}\n    },\n    {\n        selector: \".node-adapter\",\n        style: {\n            \"background-color\": \"#3498db\",\n            'text-outline-color': \"#2980b9\"\n        }\n    },\n    {\n        selector: \".node-filter\",\n        style: {\n            \"background-color\": \"#1abc9c\",\n            'text-outline-color': \"#16a085\"\n        }\n    },\n    {\n        selector: \".block\",\n        style: {\n            \"text-valign\": \"top\",\n            \"text-margin-y\": \"15px\",\n            \"padding\": \"20px\"\n        }\n    },\n    {\n        selector: \".block-adapter\",\n        style: {\n            \"background-color\": \"#3498db\",\n            'border-color': \"#2980b9\",\n            'text-outline-color': \"#2980b9\"\n        }\n    },\n    {\n        selector: \".block-filter-group\",\n        style: {\n            \"background-color\": \"#f1c40f\",\n            'border-color': \"#f39c12\",\n            'text-outline-color': \"#f39c12\"\n        }\n    },\n    {\n        selector: \".node-implicit\",\n        style: {\n            \"background-color\": \"#fff\",\n            \"border-style\": \"dashed\",\n            \"border-width\": 3\n        }\n    },\n    {\n        selector: '.node-request',\n        style: {\n            'text-outline-color': \"#d35400\",\n            \"border-color\": \"#e67e22\",\n        }\n    },\n    {\n        selector: '.node-group',\n        style: {\n            'text-outline-color': \"#8e44ad\",\n            \"border-color\": \"#9b59b6\",\n        }\n    },\n    {\n        selector: '.node-application',\n        style: {\n            \"background-color\": \"#e74c3c\",\n            'text-outline-color': \"#c0392b\",\n            \"border-color\": \"#c0392b\",\n        }\n    },\n    {\n        selector: '.implicit_label',\n        style: {\n            'color': '#7f8c8d',\n            \"text-opacity\": 0.5\n        }\n    }\n];","import React from 'react';\nimport Cytoscape from 'cytoscape';\nimport CoseBilkentLayout from 'cytoscape-cose-bilkent';\nimport EulerLayout from 'cytoscape-euler';\nimport KlayLayout from 'cytoscape-klay';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport {observer} from \"mobx-react\";\nimport {action, computed, observable} from \"mobx\";\nimport {routingToElements} from \"../util/ModelUtils\";\nimport {stylesheet} from \"../config/AppConfig\";\n\nCytoscape.use(CoseBilkentLayout);\nCytoscape.use(EulerLayout);\nCytoscape.use(KlayLayout);\n\n@observer\nclass App extends React.Component<any, any> {\n    @observable\n    private routing: string = \"{\\\"rules\\\":[]}\";\n    @observable\n    private searchQuery: string = \"\";\n    @observable\n    private viewType: string = \"simple\";\n\n    private core: Cytoscape.Core | null = null;\n\n    @computed\n    get data(): Cytoscape.ElementDefinition[] {\n        try {\n            let elements = routingToElements(JSON.parse(this.routing), {\n                searchQuery: this.searchQuery,\n                viewType: this.viewType\n            });\n            // elements.map(row => console.log({\n            //     name: row.data.id,\n            //     css: JSON.stringify(row.css)\n            // }));\n            return elements\n        } catch (e) {\n            console.log(\"Routing conversion is failed\", e);\n            return [];\n        }\n    }\n\n    @action.bound\n    public onChangeSearchQuery(e: any): void {\n        this.searchQuery = e.target.value;\n    }\n\n    @action.bound\n    public onChangeViewType(e: any): void {\n        this.viewType = e.target.value;\n        setTimeout(() => {\n            this.formatLayout()\n        }, 500);\n    }\n\n    @action.bound\n    public onChange(e: any): void {\n        this.routing = e.target.value;\n        setTimeout(() => {\n            this.formatLayout()\n        }, 500);\n    }\n\n    @action.bound\n    public formatJson(): void {\n        try {\n            this.routing = JSON.stringify(JSON.parse(this.routing), null, 4)\n        } catch (e) {\n            console.error(\"Error in JSON formatting\", e);\n        }\n    }\n\n    @action.bound\n    public formatLayout(): void {\n        const layout = this.core?.layout({\n            name: 'cose-bilkent',\n            idealEdgeLength: 250 as any,\n            animate: 'end' as any,\n            animationEasing: 'ease-out' as any,\n            animationDuration: 1000,\n            randomize: true\n        });\n        layout?.run();\n    }\n\n    public render() {\n        const elements = this.data;\n        return (\n            <div className=\"app\">\n                <div className=\"section\">\n                    <h1 className=\"title\">SOLAR Routing Viewer</h1>\n                    <h2 className=\"subtitle\">\n                        Copy the \"routing.json\" file into the text field to show routing graph\n                    </h2>\n                </div>\n                <div className=\"section\">\n                    <div className=\"columns\">\n                        <div className=\"column\">\n                            <CytoscapeComponent elements={elements} stylesheet={stylesheet} className=\"graph\"\n                                                cy={this.setCore}/>\n                        </div>\n                        <div className=\"column\">\n                            <div className=\"field is-grouped\">\n                                <div className=\"control\">\n                                    <button className=\"button is-primary\" onClick={this.formatJson}>\n                                        Format JSON\n                                    </button>\n                                </div>\n                                <div className=\"control\">\n                                    <button className=\"button is-danger\" onClick={this.formatLayout}>\n                                        Format layout\n                                    </button>\n                                </div>\n                                <div className=\"control\">\n                                    <input type=\"text\" className=\"input\" placeholder=\"Search query...\"\n                                           onChange={this.onChangeSearchQuery} value={this.searchQuery}/>\n                                </div>\n                                <div className=\"control\">\n                                    <div className=\"select\">\n                                        <select onChange={this.onChangeViewType} value={this.viewType}>\n                                            <option value=\"simple\">Simple</option>\n                                            <option value=\"complex\">Complex</option>\n                                        </select>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"control is-fullheight\">\n                                <textarea className=\"textarea\" onChange={this.onChange} value={this.routing}/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    @action.bound\n    private setCore(core: Cytoscape.Core) {\n        this.core = core\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById('root') as Element;\nReactDOM.render(<App/>, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}