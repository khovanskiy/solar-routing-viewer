{"version":3,"sources":["util/ModelUtils.ts","config/AppConfig.ts","util/Bulma.ts","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["validate","value","searchQuery","toLowerCase","includes","sortObject","input","Object","keys","sort","reduce","output","key","propertyComparator","lhs","rhs","length","i","c","localeCompare","arrayComparator","split","compositeComparator","comparators","result","ruleComparator","a","b","request","group","source","destination","application","ruleDifferenceComparator","left","right","sortRouting","routing","sourceFilters","destinationFilters","rules","formatRouting","json","JSON","stringify","parse","e","console","error","addRule","rule","push","simplifyRouting","newModel","buildDifference","comparator","matched","difference","forEach","found","undefined","find","toNamedFilters","filters","temp","map","name","body","namedFilterComparator","routingToElements","config","log","isComplexViewType","viewType","elements","nodes","Map","routesMap","incomingEdgesCount","getUniqueRequests","requests","Set","filter","it","add","putNode","node","existed","get","id","set","startsWith","adapter","hasSourceFilters","hasDestinationFilters","getDestinationFilters","rootId","parentId","putEdge","edge","array","target","count","findFilters","current","putComplexEdge","newSource","newTarget","newRequest","sourceId","targetId","currentId","startId","edgeLabel","blockId","tempId","requestRenamingLike","findIndex","findRequestRenamingLike","hasRequestRenamingLike","filterName","index","filterId","label","implicitLabel","buildOutgoingPath","buildIncomingPath","defineAdapter","defineApplication","ruleIncomingRequests","entries","entry","adapterName","requestName","has","requestId","validateRule","size","Math","min","classes","data","parent","css","width","height","targets","edges","stylesheet","selector","style","cn","blockName","elementName","modifiers","custom","base","className","hasOwnProperty","Cytoscape","use","CoseBilkentLayout","EulerLayout","KlayLayout","modifier","column","App","action","bound","observer","core","this","setTimeout","updateLayout","primaryRouting","autoUpdate","secondaryRouting","autoUpdateDifference","buildRoutingDifference","layout","idealEdgeLength","animate","animationEasing","animationDuration","randomize","run","mode","isComparatorMode","onClick","changeMode","icon","faStream","isVisualizerMode","faImage","formatJson","faPencilAlt","simplifyJson","faMagic","onChange","onPrimaryRoutingChange","spellCheck","onSecondaryRoutingChange","onChangeViewType","type","placeholder","onChangeSearchQuery","faSync","cy","setCore","faRoute","diff","renderRule","mergeRule","faChevronLeft","faChevronRight","renderTag","autoUpdateLayout","updateDifference","React","Component","observable","computed","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7b72594.chunk.js","sourcesContent":["import Rule from \"../model/Rule\";\nimport Cytoscape from \"cytoscape\";\nimport Routing, {Filters} from \"../model/Routing\";\nimport Edge from \"../model/Edge\";\nimport Node from \"../model/Node\";\nimport Filter from \"../model/Filter\";\nimport Comparator from \"./Comparator\";\nimport Difference from \"./Difference\";\nimport RoutingDifference from \"./RoutingDifference\";\nimport NamedFilter from \"../model/NamedFilter\";\n\nfunction validate(value: string, searchQuery: string): boolean {\n    return value.toLowerCase().includes(searchQuery.toLowerCase())\n}\n\nexport function validateRule(rule: Rule, searchQuery: string): boolean {\n    if (rule.source && validate(rule.source, searchQuery)) {\n        return true;\n    }\n    if (rule.request && validate(rule.request, searchQuery)) {\n        return true;\n    }\n    if (rule.group && validate(rule.group, searchQuery)) {\n        return true;\n    }\n    if (rule.destination && validate(rule.destination, searchQuery)) {\n        return true;\n    }\n    if (rule.application && validate(rule.application, searchQuery)) {\n        return true;\n    }\n    return false;\n}\n\ninterface ConversionConfig {\n    searchQuery: string,\n    viewType: string;\n}\n\nfunction sortObject(input: any): any {\n    return Object.keys(input).sort().reduce((output, key) => {\n        output[key] = input[key];\n        return output;\n    }, {} as any);\n}\n\nfunction arrayComparator(lhs: string[], rhs: string[]): number {\n    if (lhs === rhs) {\n        return 0;\n    }\n    if (lhs.length !== rhs.length) {\n        return lhs.length - rhs.length\n    }\n    const length = lhs.length;\n    for (let i = 0; i < length; ++i) {\n        const c = lhs[i].localeCompare(rhs[i]);\n        if (c !== 0) {\n            return c;\n        }\n    }\n    return 0;\n}\n\nfunction propertyComparator(lhs?: string, rhs?: string): number {\n    if (lhs == null) {\n        return rhs == null ? 0 : 1;\n    }\n    if (rhs == null) {\n        return -1;\n    }\n    return arrayComparator(lhs.split(\".\", 2), rhs.split(\".\", 2))\n}\n\nfunction compositeComparator<T>(comparators: Comparator<T>[]): Comparator<T> {\n    return (lhs, rhs) => {\n        for (let i = 0; i < comparators.length; ++i) {\n            const result = comparators[i](lhs, rhs);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\n\nconst ruleComparator = compositeComparator([\n    (a?: Rule, b?: Rule) => propertyComparator(a?.request, b?.request),\n    (a?: Rule, b?: Rule) => propertyComparator(a?.group, b?.group),\n    (a?: Rule, b?: Rule) => propertyComparator(a?.source, b?.source),\n    (a?: Rule, b?: Rule) => propertyComparator(a?.destination, b?.destination),\n    (a?: Rule, b?: Rule) => propertyComparator(a?.application, b?.application),\n]);\n\nconst ruleDifferenceComparator: Comparator<Difference<Rule>> = (a?: Difference<Rule>, b?: Difference<Rule>) => ruleComparator(\n    a?.left || a?.right,\n    b?.left || b?.right\n);\n\nexport function sortRouting(routing: Routing): Routing {\n    const result: Routing = {};\n    if (routing?.sourceFilters) {\n        result.sourceFilters = sortObject(routing.sourceFilters)\n    }\n    if (routing?.destinationFilters) {\n        result.destinationFilters = sortObject(routing.destinationFilters)\n    }\n    result.rules = routing.rules?.sort(ruleComparator);\n    return result;\n}\n\nexport function formatRouting(json: string): string {\n    try {\n        return JSON.stringify(JSON.parse(json), null, 4)\n    } catch (e) {\n        console.error(\"Error in JSON formatting\", e);\n    }\n    return json;\n}\n\nexport function addRule(json: string, rule: Rule): string {\n    try {\n        const routing: Routing = JSON.parse(json);\n        const rules = routing.rules || [];\n        rules.push(rule);\n        routing.rules = rules;\n        return JSON.stringify(routing, null, 4)\n    } catch (e) {\n        console.error(\"Error in JSON formatting\", e);\n    }\n    return json;\n}\n\nexport function simplifyRouting(json: string): string {\n    try {\n        const model: Routing = JSON.parse(json);\n        const newModel: Routing = sortRouting(model);\n        return JSON.stringify(newModel, null, 4)\n    } catch (e) {\n        console.error(\"Error in JSON simplifying\", e);\n    }\n    return json;\n}\n\nfunction buildDifference<T>(left: T[], right: T[], comparator: Comparator<T>): Difference<T>[] {\n    const matched: T[] = [];\n    const difference: Difference<T>[] = [];\n    left.forEach(a => {\n        let found = false;\n        right.forEach(b => {\n            if (comparator(a, b) === 0) {\n                matched.push(b);\n                found = true;\n            }\n        });\n        if (!found) {\n            difference.push({\n                left: a,\n                right: undefined\n            })\n        }\n    });\n    right.forEach(a => {\n        const found: boolean = matched.find(b => comparator(a, b) === 0) != null;\n        if (!found) {\n            difference.push({\n                left: undefined,\n                right: a\n            })\n        }\n    });\n    return difference;\n}\n\nfunction toNamedFilters(filters?: Filters): NamedFilter[] {\n    let temp = filters || {};\n    return Object.keys(temp).map(key => ({\n        name: key,\n        body: temp[key] as any\n    }));\n}\n\nconst namedFilterComparator = compositeComparator([\n    (a?: NamedFilter, b?: NamedFilter) => propertyComparator(a?.name, b?.name)\n]);\n\nexport function buildRoutingDifference(lhs: Routing, rhs: Routing): RoutingDifference {\n    lhs = sortRouting(lhs);\n    rhs = sortRouting(rhs);\n    const sourceFilters = buildDifference(\n        toNamedFilters(lhs.sourceFilters),\n        toNamedFilters(rhs.sourceFilters),\n        namedFilterComparator\n    );\n    const rules = buildDifference(\n        lhs.rules || [],\n        rhs.rules || [],\n        ruleComparator\n    ).sort(ruleDifferenceComparator);\n    return {\n        sourceFilters: sourceFilters,\n        rules: rules,\n        destinationFilters: []\n    }\n}\n\nexport function routingToElements(routing: Routing, config: ConversionConfig): Cytoscape.ElementDefinition[] {\n    console.log(\"Converting the routing JSON to graph elements is started\");\n    const isComplexViewType = config.viewType == \"complex\";\n    const elements: Cytoscape.ElementDefinition[] = [];\n    const nodes = new Map<string, Node>();\n    const routesMap = new Map<string, Map<string, Edge[]>>();\n    const incomingEdgesCount = new Map<string, number>();\n\n    function getSourceFilters(adapter: string): Filter[] {\n        return ((routing.sourceFilters || {})[adapter] || []);\n    }\n\n    function getDestinationFilters(adapter: string): Filter[] {\n        return ((routing.destinationFilters || {})[adapter] || []);\n    }\n\n    function getUniqueRequests(filters: Filter[]): Set<string> {\n        const requests = new Set<string>();\n        filters.forEach(filter => {\n            filter.requests.forEach(it => requests.add(it));\n        });\n        return requests;\n    }\n\n    function putNode(node: Node): Node {\n        const existed = nodes.get(node.id);\n        if (existed != null) {\n            return existed;\n        }\n        nodes.set(node.id, node);\n        if (!node.id.startsWith(\"adapter_\")) {\n            return node;\n        }\n        if (!isComplexViewType) {\n            return node;\n        }\n        const hasSourceFilters = getSourceFilters(node.name).length > 0;\n        const hasDestinationFilters = getDestinationFilters(node.name).length > 0;\n        const hasAnyFilters = hasSourceFilters || hasDestinationFilters;\n        if (hasAnyFilters) {\n            let rootId = \"root_\" + node.id;\n            putNode({id: rootId, name: node.name, parentId: node.id});\n            node.rootId = rootId;\n            // if (hasSourceFilters) {\n            //     const blockId = \"block_outgoing_\" + node.id;\n            //     putNode({id: blockId, name: \"[filterRequest]\", parentId: node.id});\n            // }\n            // if (hasDestinationFilters) {\n            //     const blockId = \"block_incoming_\" + node.id;\n            //     putNode({id: blockId, name: \"[filterResponse]\", parentId: node.id});\n            // }\n        }\n        return node;\n    }\n\n    const putEdge = (edge: Edge): void => {\n        let map = routesMap.get(edge.source);\n        if (map == null) {\n            map = new Map<string, Edge[]>();\n            routesMap.set(edge.source, map);\n        }\n        let array = map.get(edge.target);\n        let count = incomingEdgesCount.get(edge.target) || 0;\n        if (array == null) {\n            array = [];\n            map.set(edge.target, array)\n        }\n        incomingEdgesCount.set(edge.target, count + 1);\n        array.push(edge);\n    };\n    const findFilters = (adapter: string, request: string, filters?: Filters): string[] => {\n        const current = (filters || {})[adapter] || [];\n        const result: string[] = [];\n        current.forEach(filter => {\n            if (filter.requests.includes(\"*\") || filter.requests.includes(request)) {\n                filter.filters.forEach(it => result.push(it))\n            }\n        });\n        return result;\n    };\n    const putComplexEdge = (newSource: Node, newTarget: Node, newRequest: string): void => {\n        // if (!validate(newSource.name, config.searchQuery) && !validate(newTarget.name, config.searchQuery) && !validate(newRequest, config.searchQuery)) {\n        //     return;\n        // }\n        const source = putNode(newSource);\n        const target = putNode(newTarget);\n        const sourceId = source.rootId || source.id;\n        const targetId = target.rootId || target.id;\n        let currentId = sourceId;\n\n        function calculateFiltersCount(filters: string[]): Map<string, number> {\n            let filterCount = new Map<string, number>();\n            filters.forEach(filterName => {\n                let index = filterCount.get(filterName);\n                if (index == null) {\n                    index = 1;\n                } else {\n                    index++;\n                }\n                filterCount.set(filterName, index);\n            });\n            return filterCount;\n        }\n\n        function findRequestRenamingLike(filters: string[]): number {\n            return filters.findIndex(it => it.toLowerCase().includes(\"requestRenaming\".toLowerCase()));\n        }\n\n        function buildOutgoingPath(startId: string, sourceFilters: string[], destinationFilters: string[], edgeLabel: string): string {\n            const filters: string[] = sourceFilters;//[...sourceFilters, ...destinationFilters];\n            const blockId = \"block_outgoing_\" + source.id;\n            if (filters.length > 0) {\n                putNode({id: blockId, name: \"Outgoing Filters\", parentId: source.id});\n            }\n            let tempId = startId;\n            const requestRenamingLike = findRequestRenamingLike(filters);\n            const hasRequestRenamingLike = requestRenamingLike >= 0;\n            filters.forEach((filterName, index) => {\n                const filterId = \"filter_outgoing_\" + source.id + \"_\" + filterName + \"_\" + index;\n                putNode({id: filterId, name: filterName, parentId: blockId});\n                if (!hasRequestRenamingLike || requestRenamingLike >= index) {\n                    putEdge({source: tempId, target: filterId, label: edgeLabel});\n                } else {\n                    putEdge({source: tempId, target: filterId, label: edgeLabel, implicitLabel: true});\n                }\n                tempId = filterId;\n                ++index;\n            });\n            return tempId;\n        }\n\n        function buildIncomingPath(startId: string, sourceFilters: string[], destinationFilters: string[], edgeLabel: string): string {\n            const filters = destinationFilters;//[...sourceFilters, ...destinationFilters].reverse();\n            let blockId = \"block_incoming_\" + target.id;\n            if (filters.length > 0) {\n                putNode({id: blockId, name: \"Incoming Filters\", parentId: target.id});\n            }\n            let tempId = startId;\n            filters.forEach((filterName, index) => {\n                let filterId = \"filter_incoming_\" + target.id + \"_\" + filterName + \"_\" + index;\n                putNode({id: filterId, name: filterName, parentId: blockId});\n                putEdge({source: tempId, target: filterId, label: edgeLabel});\n                tempId = filterId\n            });\n            return tempId;\n        }\n\n        if (source.rootId) {\n            const sourceFilters = findFilters(source.name, newRequest, routing.sourceFilters);\n            const destinationFilters = findFilters(source.name, newRequest, routing.destinationFilters);\n            currentId = buildOutgoingPath(currentId, sourceFilters, destinationFilters, newRequest);\n        }\n        if (target.rootId) {\n            const sourceFilters = findFilters(target.name, newRequest, routing.sourceFilters);\n            const destinationFilters = findFilters(target.name, newRequest, routing.destinationFilters);\n            currentId = buildIncomingPath(currentId, sourceFilters, destinationFilters, newRequest);\n        }\n        putEdge({source: currentId, target: targetId, label: newRequest});\n    };\n\n    function defineAdapter(name: string): Node {\n        return {\n            id: \"adapter_\" + name,\n            name: name\n        }\n    }\n\n    function defineApplication(name: string): Node {\n        return {\n            id: \"application_\" + name,\n            name: name\n        }\n    }\n\n    const ruleIncomingRequests = new Set<string>();\n    routing.rules?.forEach(rule => {\n        if (rule.request) {\n            ruleIncomingRequests.add(rule.request);\n        }\n    });\n    Object.entries(routing.sourceFilters || {}).forEach(entry => {\n        const [adapterName, filters] = entry;\n        const adapter = defineAdapter(adapterName);\n        getUniqueRequests(filters).forEach(requestName => {\n            if (!ruleIncomingRequests.has(requestName)) {\n                if (!validate(adapterName, config.searchQuery) && !validate(requestName, config.searchQuery)) {\n                    return;\n                }\n                if (requestName == \"*\" && !isComplexViewType) {\n                    return;\n                }\n                const requestId = \"request_outgoing_\" + adapter.id + \"_\" + requestName;\n                putComplexEdge(adapter, {id: requestId, name: requestName}, requestName);\n            }\n        });\n    });\n    Object.entries(routing.destinationFilters || {}).forEach(entry => {\n        const [adapterName, filters] = entry;\n        const adapter = defineAdapter(adapterName);\n        getUniqueRequests(filters).forEach(requestName => {\n            if (!ruleIncomingRequests.has(requestName)) {\n                if (!validate(adapterName, config.searchQuery) && !validate(requestName, config.searchQuery)) {\n                    return;\n                }\n                if (requestName == \"*\" && !isComplexViewType) {\n                    return;\n                }\n                const requestId = \"request_incoming_\" + adapter.id + \"_\" + requestName;\n                putComplexEdge({id: requestId, name: requestName}, adapter, requestName);\n            }\n        });\n    });\n    routing.rules?.forEach(rule => {\n        if (!validateRule(rule, config.searchQuery)) {\n            return;\n        }\n        // edges\n        const request = rule.request || \"\";\n        if (rule.source && rule.destination) {\n            putComplexEdge(defineAdapter(rule.source), defineAdapter(rule.destination), request);\n        }\n        if (rule.source && rule.application) {\n            putComplexEdge(defineAdapter(rule.source), defineApplication(rule.application), request);\n        }\n        if (!rule.source) {\n            if (rule.destination) {\n                if (rule.group) {\n                    const adapter = defineAdapter(rule.destination);\n                    putComplexEdge({\n                        id: \"group_\" + rule.group,\n                        name: rule.group\n                    }, adapter, request);\n                } else if (rule.request) {\n                    const adapter = defineAdapter(rule.destination);\n                    putComplexEdge({\n                        id: \"request_incoming_\" + adapter.id + \"_\" + rule.request,\n                        name: rule.request\n                    }, adapter, request);\n                }\n            } else if (rule.application) {\n                if (rule.group) {\n                    const application = defineApplication(rule.application);\n                    putComplexEdge({\n                        id: \"group_\" + rule.group,\n                        name: rule.group\n                    }, application, request);\n                } else if (rule.request) {\n                    const application = defineApplication(rule.application);\n                    putComplexEdge({\n                        id: \"request_incoming_\" + application.id + \"_\" + rule.request,\n                        name: rule.request\n                    }, application, request);\n                }\n            }\n        }\n    });\n    /*let componentIdx = 0;\n    const list = Array.from(nodes.values()).sort((lhs: Node , rhs: Node) => {\n        const left = incomingEdgesCount.get(lhs.id) || 0;\n        const right = incomingEdgesCount.get(rhs.id) || 0;\n        return right - left;\n    });\n\n    const dfs = (source: Node, componentId: string) => {\n        console.log(\"DFS\", source, componentId);\n        if (source.parentId) {\n            return;\n        }\n        source.parentId = componentId;\n        const children = routesMap.get(source.id);\n        if (children == null) {\n            return;\n        }\n        children.forEach((edges, targetId) => {\n            const target = nodes.get(targetId);\n            if (target == null) {\n                return;\n            }\n            dfs(target, componentId)\n        });\n    };\n    list.forEach(node => {\n        if (node.parentId) {\n            return;\n        }\n        dfs(node, \"component_\" + componentIdx);\n        ++componentIdx;\n    });\n\n    for (let i = 0; i < componentIdx; ++i) {\n        putNode({id: \"component_\" + i, name: \"Component #\" + i})\n    }*/\n\n    const calculateSize = (name: string): number => {\n        return Math.min((incomingEdgesCount.get(name) || 1) * 10 + 20, 100);\n    };\n    nodes.forEach(node => {\n        const size = calculateSize(node.id);\n        let defaultStyle = {};\n        let classes: string[] = [];\n        let label = node.name;\n        if (node.id.startsWith(\"adapter_\")) {\n            if (isComplexViewType && node.rootId) {\n                classes = [\"block\", \"block-adapter\"];\n                label = \"\";\n            } else {\n                classes = [\"node\", \"node-adapter\"];\n            }\n        } else if (node.id.startsWith(\"request_\")) {\n            classes = [\"node-implicit\", \"node-request\"];\n            label = \"\";\n        } else if (node.id.startsWith(\"group_\")) {\n            classes = [\"node\", \"node-implicit\", \"node-group\"]\n        } else if (node.id.startsWith(\"application_\")) {\n            classes = [\"node\", \"node-application\"]\n        } else if (node.id.startsWith(\"block_\")) {\n            classes = [\"block\", \"block-filter-group\"];\n        } else if (node.id.startsWith(\"filter_\")) {\n            classes = [\"node\", \"node-filter\"];\n        } else if (node.id.startsWith(\"root_adapter_\")) {\n            classes = [\"node\", \"node-adapter\"];\n        }\n        elements.push({\n            data: {\n                id: node.id,\n                label: label,\n                parent: node.parentId\n            },\n            css: {\n                ...defaultStyle,\n                width: size,\n                height: size\n            },\n            classes: classes as any\n        })\n    });\n    routesMap.forEach((targets, source) => {\n        targets.forEach(edges => {\n            edges.forEach(edge => {\n                elements.push({\n                    data: {\n                        source: edge.source,\n                        target: edge.target,\n                        label: edge.label\n                    },\n                    classes: (edge.implicitLabel === true ? \"implicit_label\" : undefined)\n                })\n            })\n        });\n    });\n    console.log(\"Converting the routing JSON to graph elements is finished\");\n    return elements;\n}","export const stylesheet = [\n    {\n        selector: 'node',\n        style: {\n            label: 'data(label)',\n            \"font-size\": \"10px\",\n            'color': '#ecf0f1',\n            \"text-outline-color\": \"#34495e\",\n            'text-outline-width': 1,\n            \"text-valign\": \"center\",\n            \"text-halign\": \"center\",\n            \"border-width\": 0\n        }\n    },\n    {\n        selector: 'edge',\n        style: {\n            'label': 'data(label)',\n            'text-rotation': 'autorotate',\n            \"line-color\": \"#bdc3c7\",\n            width: 1,\n            \"font-size\": \"8px\",\n            'color': '#34495e',\n            \"arrow-scale\": 2,\n            \"mid-target-arrow-shape\": \"vee\",\n            \"target-arrow-shape\": \"vee\",\n            \"mid-target-arrow-color\": \"#2ecc71\",\n            \"target-arrow-color\": \"#2ecc71\",\n            \"target-distance-from-node\": \"5px\",\n            \"curve-style\": \"bezier\"\n        }\n    },\n    {\n        selector: ':parent',\n        style: {\n            'background-opacity': 0.1,\n            \"border-width\": 1,\n        }\n    },\n    {\n        selector: \".node\",\n        style: {}\n    },\n    {\n        selector: \".node-adapter\",\n        style: {\n            \"background-color\": \"#3498db\",\n            'text-outline-color': \"#2980b9\"\n        }\n    },\n    {\n        selector: \".node-filter\",\n        style: {\n            \"background-color\": \"#1abc9c\",\n            'text-outline-color': \"#16a085\"\n        }\n    },\n    {\n        selector: \".block\",\n        style: {\n            \"text-valign\": \"top\",\n            \"text-margin-y\": \"15px\",\n            \"padding\": \"20px\"\n        }\n    },\n    {\n        selector: \".block-adapter\",\n        style: {\n            \"background-color\": \"#3498db\",\n            'border-color': \"#2980b9\",\n            'text-outline-color': \"#2980b9\"\n        }\n    },\n    {\n        selector: \".block-filter-group\",\n        style: {\n            \"background-color\": \"#f1c40f\",\n            'border-color': \"#f39c12\",\n            'text-outline-color': \"#f39c12\"\n        }\n    },\n    {\n        selector: \".node-implicit\",\n        style: {\n            \"background-color\": \"#fff\",\n            \"border-style\": \"dashed\",\n            \"border-width\": 3\n        }\n    },\n    {\n        selector: '.node-request',\n        style: {\n            'text-outline-color': \"#d35400\",\n            \"border-color\": \"#e67e22\",\n        }\n    },\n    {\n        selector: '.node-group',\n        style: {\n            'text-outline-color': \"#8e44ad\",\n            \"border-color\": \"#9b59b6\",\n        }\n    },\n    {\n        selector: '.node-application',\n        style: {\n            \"background-color\": \"#e74c3c\",\n            'text-outline-color': \"#c0392b\",\n            \"border-color\": \"#c0392b\",\n        }\n    },\n    {\n        selector: '.implicit_label',\n        style: {\n            'color': '#7f8c8d',\n            \"text-opacity\": 0.5\n        }\n    }\n];","type ModifiersMap = { [key: string]: boolean | string };\n\nexport function cn(blockName: string) {\n    return function (elementName?: string, modifiers?: ModifiersMap, custom?: string): string {\n        let base = blockName;\n        if (elementName) {\n            base += \"-\" + elementName;\n        }\n        let className = base;\n        if (modifiers) {\n            for (let key in modifiers) {\n                if (modifiers.hasOwnProperty(key)) {\n                    const value = modifiers[key];\n                    if (typeof value == \"boolean\" && value) {\n                        className += \" \" + key;\n                    } else if (typeof value == \"string\" && value) {\n                        className += \" \" + value;\n                    }\n                }\n            }\n        }\n        if (custom) {\n            className += \" \" + custom;\n        }\n        return className;\n    }\n}","import React from 'react';\nimport {action, computed, observable} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faChevronLeft,\n    faChevronRight,\n    faImage,\n    faMagic,\n    faPencilAlt,\n    faRoute,\n    faStream,\n    faSync\n} from '@fortawesome/free-solid-svg-icons'\nimport Cytoscape from 'cytoscape';\nimport CoseBilkentLayout from 'cytoscape-cose-bilkent';\nimport EulerLayout from 'cytoscape-euler';\nimport KlayLayout from 'cytoscape-klay';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport {addRule, buildRoutingDifference, formatRouting, routingToElements, simplifyRouting} from \"../util/ModelUtils\";\nimport {stylesheet} from \"../config/AppConfig\";\nimport Routing from \"../model/Routing\";\nimport RoutingDifference from \"../util/RoutingDifference\";\nimport {cn} from \"../util/Bulma\";\nimport Difference from \"../util/Difference\";\nimport Rule from \"../model/Rule\";\n\nCytoscape.use(CoseBilkentLayout);\nCytoscape.use(EulerLayout);\nCytoscape.use(KlayLayout);\n\nconst modifier = cn(\"\");\nconst column = cn(\"column\");\nconst button = cn(\"column\");\n\n@observer\nclass App extends React.Component<any, any> {\n    @observable\n    private primaryRouting: string = \"{\\\"rules\\\":[]}\";\n    @observable\n    private secondaryRouting: string = \"\";\n    @observable\n    private searchQuery: string = \"\";\n    @observable\n    private viewType: string = \"simple\";\n    @observable\n    private difference: RoutingDifference = {\n        sourceFilters: [],\n        rules: [],\n        destinationFilters: []\n    };\n    @observable\n    private mode: string = \"visualizer\";\n\n    private core: Cytoscape.Core | null = null;\n\n    @computed\n    get data(): Cytoscape.ElementDefinition[] {\n        try {\n            let elements = routingToElements(JSON.parse(this.primaryRouting), {\n                searchQuery: this.searchQuery,\n                viewType: this.viewType\n            });\n            // elements.map(row => console.log({\n            //     name: row.data.id,\n            //     css: JSON.stringify(row.css)\n            // }));\n            return elements\n        } catch (e) {\n            console.log(\"Routing conversion is failed\", e);\n            return [];\n        }\n    }\n\n    @action.bound\n    public onChangeSearchQuery(e: any): void {\n        this.searchQuery = e.target.value;\n    }\n\n    @computed\n    public get isComparatorMode(): boolean {\n        return this.mode === \"comparator\"\n    }\n\n    @computed\n    public get isVisualizerMode(): boolean {\n        return this.mode === \"visualizer\";\n    }\n\n    @action.bound\n    public onChangeViewType(e: any): void {\n        this.viewType = e.target.value;\n        setTimeout(() => {\n            this.updateLayout()\n        }, 500);\n    }\n\n    @action.bound\n    public onPrimaryRoutingChange(e: any): void {\n        this.primaryRouting = e.target.value;\n        this.autoUpdate();\n    }\n\n    @action.bound\n    public onSecondaryRoutingChange(e: any): void {\n        this.secondaryRouting = e.target.value;\n        this.autoUpdateDifference();\n    }\n\n    @action.bound\n    public formatJson(): void {\n        this.primaryRouting = formatRouting(this.primaryRouting);\n        this.secondaryRouting = formatRouting(this.secondaryRouting);\n    }\n\n    @action.bound\n    public simplifyJson(): void {\n        this.primaryRouting = simplifyRouting(this.primaryRouting);\n        this.secondaryRouting = simplifyRouting(this.secondaryRouting);\n    }\n\n    @action.bound\n    public updateDifference(): void {\n        try {\n            const lhs: Routing = JSON.parse(this.primaryRouting);\n            const rhs: Routing = JSON.parse(this.secondaryRouting);\n            this.difference = buildRoutingDifference(lhs, rhs);\n        } catch (e) {\n            console.error(\"Error in JSON comparing\", e);\n        }\n    }\n\n    @action.bound\n    public updateLayout(): void {\n        const layout = this.core?.layout({\n            name: 'cose-bilkent',\n            idealEdgeLength: 250 as any,\n            animate: 'end' as any,\n            animationEasing: 'ease-out' as any,\n            animationDuration: 1000,\n            randomize: true\n        });\n        layout?.run();\n    }\n\n    @action.bound\n    public changeMode(mode: string) {\n        this.mode = mode;\n        this.autoUpdate();\n    }\n\n    public render() {\n        const elements = this.data;\n        const tableClass = \"table is-hoverable is-fullwidth is-striped is-bordered\";\n        return (\n            <div className=\"app\">\n                <div className=\"section\">\n                    <h1 className=\"title\">SOLAR Routing Viewer</h1>\n                    <h2 className=\"subtitle\">\n                        Copy the \"routing.json\" file into the text field to show routing graph\n                    </h2>\n                </div>\n                <div className=\"section\">\n                    <div className=\"tabs is-toggle is-fullwidth is-toggle-rounded\">\n                        <ul>\n                            <li className={modifier(\"\", {\"is-active\": this.isComparatorMode})}>\n                                <a onClick={() => this.changeMode(\"comparator\")}>\n                                    <span className=\"icon is-small\">\n                                          <FontAwesomeIcon icon={faStream}/>\n                                    </span>\n                                    <span>Routing Comparator</span>\n                                </a>\n                            </li>\n                            <li className={modifier(\"\", {\"is-active\": this.isVisualizerMode})}>\n                                <a onClick={() => this.changeMode(\"visualizer\")}>\n                                    <span className=\"icon is-small\">\n                                          <FontAwesomeIcon icon={faImage}/>\n                                    </span>\n                                    <span>Routing Visualizer</span>\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"columns\">\n                        <div className={column(\"\", {\"is-one-third\": this.isVisualizerMode})}>\n                            <div className=\"card has-equal-height\">\n                                <header className=\"card-header\">\n                                    <p className=\"card-header-title\">\n                                        Primary \"routing.json\"\n                                    </p>\n                                    <div className=\"card-header-icon\">\n                                        <div className=\"buttons\">\n                                            <button className=\"button is-warning is-small\" onClick={this.formatJson}>\n                                                <span className=\"icon is-small\">\n                                                    <FontAwesomeIcon icon={faPencilAlt}/>\n                                                </span>\n                                                <span>Format</span>\n                                            </button>\n                                            <button className=\"button is-primary is-small\" onClick={this.simplifyJson}>\n                                                <span className=\"icon is-small\">\n                                                    <FontAwesomeIcon icon={faMagic}/>\n                                                </span>\n                                                <span>Simplify</span>\n                                            </button>\n                                        </div>\n                                    </div>\n                                </header>\n                                <div className=\"card-content\">\n                                    <div className=\"content\">\n                                        <textarea className=\"textarea\" onChange={this.onPrimaryRoutingChange}\n                                                  value={this.primaryRouting} spellCheck={false}/>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                        {this.isComparatorMode && (<div className=\"column is-fullheight\">\n                                <div className=\"card has-equal-height\">\n                                    <header className=\"card-header\">\n                                        <p className=\"card-header-title\">\n                                            Secondary \"routing.json\"\n                                        </p>\n                                        <div className=\"card-header-icon\">\n                                            <div className=\"buttons\">\n                                                <button className=\"button is-warning is-small\"\n                                                        onClick={this.formatJson}>\n                                                <span className=\"icon is-small\">\n                                                    <FontAwesomeIcon icon={faPencilAlt}/>\n                                                </span>\n                                                    <span>Format</span>\n                                                </button>\n                                                <button className=\"button is-primary is-small\"\n                                                        onClick={this.simplifyJson}>\n                                                    <span className=\"icon is-small\">\n                                                        <FontAwesomeIcon icon={faMagic}/>\n                                                    </span>\n                                                    <span>Simplify</span>\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </header>\n                                    <div className=\"card-content\">\n                                        <div className=\"content\">\n                                        <textarea className=\"textarea\" onChange={this.onSecondaryRoutingChange}\n                                                  value={this.secondaryRouting} spellCheck={false}/>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                        {this.isVisualizerMode && (<div className=\"column\">\n                                <div className=\"card has-equal-height\">\n                                    <header className=\"card-header\">\n                                        <p className=\"card-header-title\">\n                                            Visualization\n                                        </p>\n                                        <div className=\"card-header-icon\">\n                                            <div className=\"field has-addons\">\n                                                <div className=\"control\">\n                                                    <div className=\"select is-small\">\n                                                        <select onChange={this.onChangeViewType} value={this.viewType}>\n                                                            <option value=\"simple\">Simple</option>\n                                                            <option value=\"complex\">Complex</option>\n                                                        </select>\n                                                    </div>\n                                                </div>\n                                                <div className=\"control\">\n                                                    <input type=\"text\" className=\"input is-small\"\n                                                           placeholder=\"Search query...\"\n                                                           onChange={this.onChangeSearchQuery}\n                                                           value={this.searchQuery}/>\n                                                </div>\n                                                <div className=\"control\">\n                                                    <button className=\"button is-danger is-small\"\n                                                            onClick={this.updateLayout}>\n                                                        <span className=\"icon is-small\">\n                                                            <FontAwesomeIcon icon={faSync}/>\n                                                        </span>\n                                                        <span>Refresh</span>\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </header>\n                                    <div className=\"card-content\">\n                                        <div className=\"content\">\n                                            <CytoscapeComponent elements={elements} stylesheet={stylesheet}\n                                                                className=\"graph\"\n                                                                cy={this.setCore}/>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {this.isComparatorMode && (\n                    <div className=\"section\">\n                        <div className=\"columns is-multiline\">\n                            <div className=\"column is-12\">\n                                <div className=\"card\">\n                                    <header className=\"card-header\">\n                                        <span className=\"card-header-icon\">\n                                            <span className=\"icon is-small\">\n                                                <FontAwesomeIcon icon={faRoute}/>\n                                            </span>\n                                        </span>\n                                        <p className=\"card-header-title\">\n                                            Rules\n                                        </p>\n                                    </header>\n                                    <table className={tableClass}>\n                                        <thead>\n                                        <tr>\n                                            <th className=\"left\">Left</th>\n                                            <th className=\"actions\"/>\n                                            <th className=\"right\">Right</th>\n                                        </tr>\n                                        </thead>\n                                        <tbody>\n                                        {this.difference.rules.map(diff => (\n                                            <tr>\n                                                <td>{this.renderRule(diff.left)}</td>\n                                                <td className=\"actions\">\n                                                    <button className=\"button is-small is-primary\"\n                                                            onClick={() => this.mergeRule(diff)}>\n                                                        <span className=\"icon is-small\">\n                                                            <FontAwesomeIcon\n                                                                icon={diff.left == null ? faChevronLeft : faChevronRight}/>\n                                                        </span>\n                                                    </button>\n                                                </td>\n                                                <td>{this.renderRule(diff.right)}</td>\n                                            </tr>\n                                        ))}\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    private renderRule(rule?: Rule) {\n        function renderTag(label: string, value: string, style: string) {\n            return (\n                <div className=\"control\">\n                    <div className=\"tags has-addons\">\n                        <span className=\"tag\">{label}</span>\n                        <span className={\"tag is-\" + style}>{value}</span>\n                    </div>\n                </div>\n            )\n        }\n\n        return (\n            <div className=\"field is-grouped is-grouped-multiline\">\n                {rule?.group && (\n                    renderTag(\"group\", rule.group, \"group\")\n                )}\n                {rule?.request && (\n                    renderTag(\"request\", rule.request, \"warning\")\n                )}\n                {rule?.source && (\n                    renderTag(\"source\", rule.source, \"info\")\n                )}\n                {rule?.destination && (\n                    renderTag(\"destination\", rule.destination, \"info\")\n                )}\n                {rule?.application && (\n                    renderTag(\"application\", rule.application, \"danger\")\n                )}\n            </div>\n        )\n    }\n\n    private autoUpdate() {\n        this.autoUpdateLayout();\n        this.autoUpdateDifference();\n    }\n\n    private autoUpdateLayout() {\n        if (this.isVisualizerMode) {\n            setTimeout(() => {\n                this.updateLayout()\n            }, 500);\n        }\n    }\n\n    private autoUpdateDifference() {\n        if (this.isComparatorMode) {\n            this.updateDifference()\n        }\n    }\n\n    @action.bound\n    private mergeRule(diff: Difference<Rule>) {\n        if (diff.left) {\n            this.secondaryRouting = addRule(this.secondaryRouting, diff.left)\n        } else if (diff.right) {\n            this.primaryRouting = addRule(this.primaryRouting, diff.right)\n        }\n        this.autoUpdate();\n    }\n\n    @action.bound\n    private setCore(core: Cytoscape.Core) {\n        this.core = core\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById('root') as Element;\nReactDOM.render(<App/>, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}