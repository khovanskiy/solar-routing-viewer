{"version":3,"sources":["util/ModelUtils.ts","config/AppConfig.ts","util/Bulma.ts","component/DifferenceTable.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["validate","value","searchQuery","toLowerCase","includes","sortObject","input","Object","keys","sort","reduce","output","key","compositeComparator","comparators","lhs","rhs","i","length","result","nullFirstComparator","comparator","arrayComparator","c","stringArrayComparator","localeCompare","propertyComparator","split","ruleComparator","a","b","request","group","source","destination","application","ruleDifferenceComparator","left","right","updateRouting","json","JSON","parse","sortRouting","routing","sourceFilters","destinationFilters","rules","addSourceFilter","filter","filters","name","body","stringify","addRule","rule","push","addDestinationFilter","simplifyRouting","newModel","e","console","error","buildDifference","matched","difference","forEach","found","undefined","find","toNamedFilters","temp","map","filterComparator","requests","namedFilterComparator","routingToElements","config","log","isComplexViewType","viewType","elements","nodes","Map","routesMap","incomingEdgesCount","getUniqueRequests","Set","it","add","putNode","node","existed","get","id","set","startsWith","adapter","hasSourceFilters","hasDestinationFilters","getDestinationFilters","rootId","parentId","putEdge","edge","array","target","count","findFilters","current","putComplexEdge","newSource","newTarget","newRequest","sourceId","targetId","currentId","startId","edgeLabel","blockId","tempId","requestRenamingLike","findIndex","findRequestRenamingLike","hasRequestRenamingLike","filterName","index","filterId","label","implicitLabel","buildOutgoingPath","buildIncomingPath","defineAdapter","defineApplication","ruleIncomingRequests","entries","entry","adapterName","requestName","has","requestId","validateRule","size","Math","min","classes","data","parent","css","width","height","targets","edges","stylesheet","selector","style","cn","blockName","elementName","modifiers","custom","base","className","hasOwnProperty","DifferenceTable","action","bound","icon","faRoute","this","props","title","diff","renderItem","onClick","merge","faAngleLeft","faAngleRight","onMerge","React","Component","Cytoscape","use","CoseBilkentLayout","EulerLayout","KlayLayout","modifier","column","App","observer","core","setTimeout","updateLayout","primaryRouting","autoUpdate","secondaryRouting","autoUpdateDifference","then","model","catch","onError","buildRoutingDifference","layout","idealEdgeLength","animate","animationEasing","animationDuration","randomize","run","mode","isComparatorMode","href","changeMode","faStream","isVisualizerMode","faImage","formatJson","faPencilAlt","simplifyJson","faMagic","onChange","onPrimaryRoutingChange","spellCheck","onSecondaryRoutingChange","onChangeViewType","type","placeholder","onChangeSearchQuery","faSync","cy","setCore","renderFilter","mergeSourceFilter","renderRule","mergeRule","mergeDestinationFilter","renderTag","item","join","autoUpdateLayout","updateDifference","observable","computed","Boolean","window","location","hostname","match","root","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mcAWA,SAASA,EAASC,EAAeC,GAC7B,OAAOD,EAAME,cAAcC,SAASF,EAAYC,eA2BpD,SAASE,EAAWC,GAChB,OAAOC,OAAOC,KAAKF,GAAOG,OAAOC,QAAO,SAACC,EAAQC,GAE7C,OADAD,EAAOC,GAAON,EAAMM,GACbD,IACR,IAGP,SAASE,EAAuBC,GAC5B,OAAO,SAACC,EAAKC,GACT,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAYI,SAAUD,EAAG,CACzC,IAAME,EAASL,EAAYG,GAAGF,EAAKC,GACnC,GAAe,IAAXG,EACA,OAAOA,EAGf,OAAO,GAIf,SAASC,EAAuBC,GAC5B,OAAO,SAACN,EAAKC,GACT,OAAW,MAAPD,EACc,MAAPC,EAAc,EAAI,EAElB,MAAPA,GACQ,EAELK,EAAWN,EAAKC,IAiB/B,SAASM,EAAmBD,GACxB,OAAOD,GACH,SAACL,EAAKC,GACF,GAAID,IAAQC,EACR,OAAO,EAEX,GAAID,EAAIG,SAAWF,EAAIE,OACnB,OAAOH,EAAIG,OAASF,EAAIE,OAG5B,IADA,IAAMA,EAASH,EAAIG,OACVD,EAAI,EAAGA,EAAIC,IAAUD,EAAG,CAC7B,IAAMM,EAAIF,EAAWN,EAAIE,GAAID,EAAIC,IACjC,GAAU,IAANM,EACA,OAAOA,EAGf,OAAO,KAQnB,IAAMC,EAAwBF,GA/BL,SAACP,EAAaC,GAAd,OAA8BD,EAAIU,cAAcT,MAiCnEU,EAAqDN,GACvD,SAACL,EAAKC,GAAN,OAAcQ,EACVT,EAAIY,MAAM,IAAK,GACfX,EAAIW,MAAM,IAAK,OAIjBC,EAA+CR,EAAoBP,EAAoB,CACzF,SAACgB,EAAGC,GAAJ,OAAUJ,EAAmBG,EAAEE,QAASD,EAAEC,UAC1C,SAACF,EAAGC,GAAJ,OAAUJ,EAAmBG,EAAEG,MAAOF,EAAEE,QACxC,SAACH,EAAGC,GAAJ,OAAUJ,EAAmBG,EAAEI,OAAQH,EAAEG,SACzC,SAACJ,EAAGC,GAAJ,OAAUJ,EAAmBG,EAAEK,YAAaJ,EAAEI,cAC9C,SAACL,EAAGC,GAAJ,OAAUJ,EAAmBG,EAAEM,YAAaL,EAAEK,iBAG5CC,EAAqEhB,GAAoB,SAACL,EAAKC,GAAN,OAAcY,EACzGb,EAAIsB,MAAQtB,EAAIuB,MAChBtB,EAAIqB,MAAQrB,EAAIsB,UAGb,SAAeC,EAAtB,kC,4CAAO,WAA6BC,GAA7B,SAAAX,EAAA,+EACIY,KAAKC,MAAMF,IADf,4C,sBAIA,SAASG,EAAYC,GAA4B,IAAD,EAC7CzB,EAAkB,GAQxB,OAPA,OAAIyB,QAAJ,IAAIA,OAAJ,EAAIA,EAASC,iBACT1B,EAAO0B,cAAgBxC,EAAWuC,EAAQC,iBAE9C,OAAID,QAAJ,IAAIA,OAAJ,EAAIA,EAASE,sBACT3B,EAAO2B,mBAAqBzC,EAAWuC,EAAQE,qBAEnD3B,EAAO4B,MAAP,UAAeH,EAAQG,aAAvB,aAAe,EAAetC,KAAKmB,GAC5BT,EAGJ,SAAS6B,EAAgBJ,EAAkBK,GAC9C,IAAMC,EAAUN,EAAQC,eAAiB,GAGzC,OAFAK,EAAQD,EAAOE,MAAQF,EAAOG,KAC9BR,EAAQC,cAAgBK,EACjBT,KAAKY,UAAUT,EAAS,KAAM,GAGlC,SAASU,EAAQV,EAAkBW,GACtC,IAAMR,EAAQH,EAAQG,OAAS,GAG/B,OAFAA,EAAMS,KAAKD,GACXX,EAAQG,MAAQA,EACTN,KAAKY,UAAUT,EAAS,KAAM,GAGlC,SAASa,EAAqBb,EAAkBK,GACnD,IAAMC,EAAUN,EAAQE,oBAAsB,GAG9C,OAFAI,EAAQD,EAAOE,MAAQF,EAAOG,KAC9BR,EAAQE,mBAAqBI,EACtBT,KAAKY,UAAUT,EAAS,KAAM,GAGlC,SAASc,EAAgBlB,GAC5B,IACI,IACMmB,EAAoBhB,EADHF,KAAKC,MAAMF,IAElC,OAAOC,KAAKY,UAAUM,EAAU,KAAM,GACxC,MAAOC,GACLC,QAAQC,MAAM,4BAA6BF,GAE/C,OAAOpB,EAUX,SAASuB,EAAmB1B,EAAWC,EAAYjB,GAC/C,IAAM2C,EAAe,GACfC,EAA8B,GAyBpC,OAxBA5B,EAAK6B,SAAQ,SAAArC,GACT,IAAIsC,GAAQ,EACZ7B,EAAM4B,SAAQ,SAAApC,GACe,IAArBT,EAAWQ,EAAGC,KACdkC,EAAQR,KAAK1B,GACbqC,GAAQ,MAGXA,GACDF,EAAWT,KAAK,CACZnB,KAAMR,EACNS,WAAO8B,OAInB9B,EAAM4B,SAAQ,SAAArC,GAC0D,MAA7CmC,EAAQK,MAAK,SAAAvC,GAAC,OAAyB,IAArBT,EAAWQ,EAAGC,OAEnDmC,EAAWT,KAAK,CACZnB,UAAM+B,EACN9B,MAAOT,OAIZoC,EAGX,SAASK,EAAepB,GACpB,IAAIqB,EAAOrB,GAAW,GACtB,OAAO3C,OAAOC,KAAK+D,GAAMC,KAAI,SAAA5D,GAAG,MAAK,CACjCuC,KAAMvC,EACNwC,KAAMmB,EAAK3D,OAInB,IAAM6D,EAAqDrD,EAAoBE,EAAgBT,EAAoB,CAC/G,SAACE,EAAKC,GAAN,OAAcQ,EAAsBT,EAAK2D,SAAU1D,EAAK0D,WACxD,SAAC3D,EAAKC,GAAN,OAAcQ,EAAsBT,EAAKmC,QAASlC,EAAKkC,cAGrDyB,EAA6DvD,EAAoBP,EAAoB,CACvG,SAACE,EAAKC,GAAN,OAAcU,EAAmBX,EAAKoC,KAAMnC,EAAKmC,OACjD,SAACpC,EAAKC,GAAN,OAAcyD,EAAiB1D,EAAKqC,KAAMpC,EAAKoC,UA4B5C,SAASwB,GAAkBhC,EAAkBiC,GAA0D,IAAD,IACzGhB,QAAQiB,IAAI,4DACZ,IAAMC,EAAwC,YAApBF,EAAOG,SAC3BC,EAA0C,GAC1CC,EAAQ,IAAIC,IACZC,EAAY,IAAID,IAChBE,EAAqB,IAAIF,IAU/B,SAASG,EAAkBpC,GACvB,IAAMwB,EAAW,IAAIa,IAIrB,OAHArC,EAAQgB,SAAQ,SAAAjB,GACZA,EAAOyB,SAASR,SAAQ,SAAAsB,GAAE,OAAId,EAASe,IAAID,SAExCd,EAGX,SAASgB,EAAQC,GACb,IAAMC,EAAUV,EAAMW,IAAIF,EAAKG,IAC/B,GAAe,MAAXF,EACA,OAAOA,EAGX,GADAV,EAAMa,IAAIJ,EAAKG,GAAIH,IACdA,EAAKG,GAAGE,WAAW,YACpB,OAAOL,EAEX,IAAKZ,EACD,OAAOY,EAEX,IA5BsBM,EA4BhBC,GA5BgBD,EA4BoBN,EAAKxC,MA3BtCP,EAAQC,eAAiB,IAAIoD,IAAY,IA2BG/E,OAAS,EACxDiF,EAzBV,SAA+BF,GAC3B,OAASrD,EAAQE,oBAAsB,IAAImD,IAAY,GAwBzBG,CAAsBT,EAAKxC,MAAMjC,OAAS,EAExE,GADsBgF,GAAoBC,EACvB,CACf,IAAIE,EAAS,QAAUV,EAAKG,GAC5BJ,EAAQ,CAACI,GAAIO,EAAQlD,KAAMwC,EAAKxC,KAAMmD,SAAUX,EAAKG,KACrDH,EAAKU,OAASA,EAUlB,OAAOV,EAGX,IAAMY,EAAU,SAACC,GACb,IAAIhC,EAAMY,EAAUS,IAAIW,EAAKvE,QAClB,MAAPuC,IACAA,EAAM,IAAIW,IACVC,EAAUW,IAAIS,EAAKvE,OAAQuC,IAE/B,IAAIiC,EAAQjC,EAAIqB,IAAIW,EAAKE,QACrBC,EAAQtB,EAAmBQ,IAAIW,EAAKE,SAAW,EACtC,MAATD,IACAA,EAAQ,GACRjC,EAAIuB,IAAIS,EAAKE,OAAQD,IAEzBpB,EAAmBU,IAAIS,EAAKE,OAAQC,EAAQ,GAC5CF,EAAMjD,KAAKgD,IAETI,EAAc,SAACX,EAAiBlE,EAAiBmB,GACnD,IAAM2D,GAAW3D,GAAW,IAAI+C,IAAY,GACtC9E,EAAmB,GAMzB,OALA0F,EAAQ3C,SAAQ,SAAAjB,IACRA,EAAOyB,SAAStE,SAAS,MAAQ6C,EAAOyB,SAAStE,SAAS2B,KAC1DkB,EAAOC,QAAQgB,SAAQ,SAAAsB,GAAE,OAAIrE,EAAOqC,KAAKgC,SAG1CrE,GAEL2F,EAAiB,SAACC,EAAiBC,EAAiBC,GAItD,IAAMhF,EAASyD,EAAQqB,GACjBL,EAAShB,EAAQsB,GACjBE,EAAWjF,EAAOoE,QAAUpE,EAAO6D,GACnCqB,EAAWT,EAAOL,QAAUK,EAAOZ,GACrCsB,EAAYF,EA2DhB,GAAIjF,EAAOoE,OAAQ,CACf,IAAMxD,EAAgB+D,EAAY3E,EAAOkB,KAAM8D,EAAYrE,EAAQC,eACxC+D,EAAY3E,EAAOkB,KAAM8D,EAAYrE,EAAQE,oBACxEsE,EA1CJ,SAA2BC,EAAiBxE,EAAyBC,EAA8BwE,GAC/F,IAAMpE,EAAoBL,EACpB0E,EAAU,kBAAoBtF,EAAO6D,GACvC5C,EAAQhC,OAAS,GACjBwE,EAAQ,CAACI,GAAIyB,EAASpE,KAAM,mBAAoBmD,SAAUrE,EAAO6D,KAErE,IAAI0B,EAASH,EACPI,EAXV,SAAiCvE,GAC7B,OAAOA,EAAQwE,WAAU,SAAAlC,GAAE,OAAIA,EAAGrF,cAAcC,SAAS,kBAAkBD,kBAU/CwH,CAAwBzE,GAC9C0E,EAAyBH,GAAuB,EAYtD,OAXAvE,EAAQgB,SAAQ,SAAC2D,EAAYC,GACzB,IAAMC,EAAW,mBAAqB9F,EAAO6D,GAAK,IAAM+B,EAAa,IAAMC,EAC3EpC,EAAQ,CAACI,GAAIiC,EAAU5E,KAAM0E,EAAYvB,SAAUiB,IAE/ChB,GADCqB,GAA0BH,GAAuBK,EAC1C,CAAC7F,OAAQuF,EAAQd,OAAQqB,EAAUC,MAAOV,GAE1C,CAACrF,OAAQuF,EAAQd,OAAQqB,EAAUC,MAAOV,EAAWW,eAAe,IAEhFT,EAASO,IACPD,KAECN,EAsBKU,CAAkBd,EAAWvE,EAAeC,EAAoBmE,GAEhF,GAAIP,EAAOL,OAAQ,CACOO,EAAYF,EAAOvD,KAAM8D,EAAYrE,EAAQC,eAEnEuE,EAxBJ,SAA2BC,EAAiBxE,EAAyBC,EAA8BwE,GAC/F,IAAMpE,EAAUJ,EACZyE,EAAU,kBAAoBb,EAAOZ,GACrC5C,EAAQhC,OAAS,GACjBwE,EAAQ,CAACI,GAAIyB,EAASpE,KAAM,mBAAoBmD,SAAUI,EAAOZ,KAErE,IAAI0B,EAASH,EAOb,OANAnE,EAAQgB,SAAQ,SAAC2D,EAAYC,GACzB,IAAIC,EAAW,mBAAqBrB,EAAOZ,GAAK,IAAM+B,EAAa,IAAMC,EACzEpC,EAAQ,CAACI,GAAIiC,EAAU5E,KAAM0E,EAAYvB,SAAUiB,IACnDhB,EAAQ,CAACtE,OAAQuF,EAAQd,OAAQqB,EAAUC,MAAOV,IAClDE,EAASO,KAENP,EAWKW,CAAkBf,EAAWvE,EADd+D,EAAYF,EAAOvD,KAAM8D,EAAYrE,EAAQE,oBACImE,GAEhFV,EAAQ,CAACtE,OAAQmF,EAAWV,OAAQS,EAAUa,MAAOf,KAGzD,SAASmB,EAAcjF,GACnB,MAAO,CACH2C,GAAI,WAAa3C,EACjBA,KAAMA,GAId,SAASkF,EAAkBlF,GACvB,MAAO,CACH2C,GAAI,eAAiB3C,EACrBA,KAAMA,GAId,IAAMmF,EAAuB,IAAI/C,IACjC,UAAA3C,EAAQG,aAAR,SAAemB,SAAQ,SAAAX,GACfA,EAAKxB,SACLuG,EAAqB7C,IAAIlC,EAAKxB,YAGtCxB,OAAOgI,QAAQ3F,EAAQC,eAAiB,IAAIqB,SAAQ,SAAAsE,GAAU,IAAD,cAC1BA,EAD0B,GAClDC,EADkD,KACrCvF,EADqC,KAEnD+C,EAAUmC,EAAcK,GAC9BnD,EAAkBpC,GAASgB,SAAQ,SAAAwE,GAC/B,IAAKJ,EAAqBK,IAAID,GAAc,CACxC,IAAK1I,EAASyI,EAAa5D,EAAO3E,eAAiBF,EAAS0I,EAAa7D,EAAO3E,aAC5E,OAEJ,GAAoB,MAAhBwI,IAAwB3D,EACxB,OAEJ,IAAM6D,EAAY,oBAAsB3C,EAAQH,GAAK,IAAM4C,EAC3D5B,EAAeb,EAAS,CAACH,GAAI8C,EAAWzF,KAAMuF,GAAcA,UAIxEnI,OAAOgI,QAAQ3F,EAAQE,oBAAsB,IAAIoB,SAAQ,SAAAsE,GAAU,IAAD,cAC/BA,EAD+B,GACvDC,EADuD,KAC1CvF,EAD0C,KAExD+C,EAAUmC,EAAcK,GAC9BnD,EAAkBpC,GAASgB,SAAQ,SAAAwE,GAC/B,IAAKJ,EAAqBK,IAAID,GAAc,CACxC,IAAK1I,EAASyI,EAAa5D,EAAO3E,eAAiBF,EAAS0I,EAAa7D,EAAO3E,aAC5E,OAEJ,GAAoB,MAAhBwI,IAAwB3D,EACxB,OAEJ,IAAM6D,EAAY,oBAAsB3C,EAAQH,GAAK,IAAM4C,EAC3D5B,EAAe,CAAChB,GAAI8C,EAAWzF,KAAMuF,GAAczC,EAASyC,UAIxE,UAAA9F,EAAQG,aAAR,SAAemB,SAAQ,SAAAX,GACnB,GAvcD,SAAsBA,EAAYrD,GACrC,SAAIqD,EAAKtB,SAAUjC,EAASuD,EAAKtB,OAAQ/B,SAGrCqD,EAAKxB,UAAW/B,EAASuD,EAAKxB,QAAS7B,SAGvCqD,EAAKvB,QAAShC,EAASuD,EAAKvB,MAAO9B,SAGnCqD,EAAKrB,cAAelC,EAASuD,EAAKrB,YAAahC,QAG/CqD,EAAKpB,cAAenC,EAASuD,EAAKpB,YAAajC,OA0b1C2I,CAAatF,EAAMsB,EAAO3E,aAA/B,CAIA,IAAM6B,EAAUwB,EAAKxB,SAAW,GAOhC,GANIwB,EAAKtB,QAAUsB,EAAKrB,aACpB4E,EAAesB,EAAc7E,EAAKtB,QAASmG,EAAc7E,EAAKrB,aAAcH,GAE5EwB,EAAKtB,QAAUsB,EAAKpB,aACpB2E,EAAesB,EAAc7E,EAAKtB,QAASoG,EAAkB9E,EAAKpB,aAAcJ,IAE/EwB,EAAKtB,OACN,GAAIsB,EAAKrB,aACL,GAAIqB,EAAKvB,MAAO,CACZ,IAAMiE,EAAUmC,EAAc7E,EAAKrB,aACnC4E,EAAe,CACXhB,GAAI,SAAWvC,EAAKvB,MACpBmB,KAAMI,EAAKvB,OACZiE,EAASlE,QACT,GAAIwB,EAAKxB,QAAS,CACrB,IAAMkE,EAAUmC,EAAc7E,EAAKrB,aACnC4E,EAAe,CACXhB,GAAI,oBAAsBG,EAAQH,GAAK,IAAMvC,EAAKxB,QAClDoB,KAAMI,EAAKxB,SACZkE,EAASlE,SAEb,GAAIwB,EAAKpB,YACZ,GAAIoB,EAAKvB,MAAO,CACZ,IAAMG,EAAckG,EAAkB9E,EAAKpB,aAC3C2E,EAAe,CACXhB,GAAI,SAAWvC,EAAKvB,MACpBmB,KAAMI,EAAKvB,OACZG,EAAaJ,QACb,GAAIwB,EAAKxB,QAAS,CACrB,IAAMI,EAAckG,EAAkB9E,EAAKpB,aAC3C2E,EAAe,CACXhB,GAAI,oBAAsB3D,EAAY2D,GAAK,IAAMvC,EAAKxB,QACtDoB,KAAMI,EAAKxB,SACZI,EAAaJ,QAoGhC,OAvDAmD,EAAMhB,SAAQ,SAAAyB,GACV,IAJmBxC,EAIb2F,GAJa3F,EAIQwC,EAAKG,GAHzBiD,KAAKC,IAA0C,IAArC3D,EAAmBQ,IAAI1C,IAAS,GAAU,GAAI,MAK3D8F,EAAoB,GACpBjB,EAAQrC,EAAKxC,KACbwC,EAAKG,GAAGE,WAAW,YACfjB,GAAqBY,EAAKU,QAC1B4C,EAAU,CAAC,QAAS,iBACpBjB,EAAQ,IAERiB,EAAU,CAAC,OAAQ,gBAEhBtD,EAAKG,GAAGE,WAAW,aAC1BiD,EAAU,CAAC,gBAAiB,gBAC5BjB,EAAQ,IACDrC,EAAKG,GAAGE,WAAW,UAC1BiD,EAAU,CAAC,OAAQ,gBAAiB,cAC7BtD,EAAKG,GAAGE,WAAW,gBAC1BiD,EAAU,CAAC,OAAQ,oBACZtD,EAAKG,GAAGE,WAAW,UAC1BiD,EAAU,CAAC,QAAS,sBACbtD,EAAKG,GAAGE,WAAW,WAC1BiD,EAAU,CAAC,OAAQ,eACZtD,EAAKG,GAAGE,WAAW,mBAC1BiD,EAAU,CAAC,OAAQ,iBAEvBhE,EAASzB,KAAK,CACV0F,KAAM,CACFpD,GAAIH,EAAKG,GACTkC,MAAOA,EACPmB,OAAQxD,EAAKW,UAEjB8C,IAAI,eA9BW,GA8BZ,CAECC,MAAOP,EACPQ,OAAQR,IAEZG,QAASA,OAGjB7D,EAAUlB,SAAQ,SAACqF,EAAStH,GACxBsH,EAAQrF,SAAQ,SAAAsF,GACZA,EAAMtF,SAAQ,SAAAsC,GACVvB,EAASzB,KAAK,CACV0F,KAAM,CACFjH,OAAQuE,EAAKvE,OACbyE,OAAQF,EAAKE,OACbsB,MAAOxB,EAAKwB,OAEhBiB,SAAiC,IAAvBzC,EAAKyB,cAAyB,sBAAmB7D,aAK3EP,QAAQiB,IAAI,6DACLG,EChmBJ,I,MAAMwE,GAAa,CACtB,CACIC,SAAU,OACVC,MAAO,CACH3B,MAAO,cACP,YAAa,OACb,MAAS,UACT,qBAAsB,UACtB,qBAAsB,EACtB,cAAe,SACf,cAAe,SACf,eAAgB,IAGxB,CACI0B,SAAU,OACVC,MAAO,CACH,MAAS,cACT,gBAAiB,aACjB,aAAc,UACdN,MAAO,EACP,YAAa,MACb,MAAS,UACT,cAAe,EACf,yBAA0B,MAC1B,qBAAsB,MACtB,yBAA0B,UAC1B,qBAAsB,UACtB,4BAA6B,MAC7B,cAAe,WAGvB,CACIK,SAAU,UACVC,MAAO,CACH,qBAAsB,GACtB,eAAgB,IAGxB,CACID,SAAU,QACVC,MAAO,IAEX,CACID,SAAU,gBACVC,MAAO,CACH,mBAAoB,UACpB,qBAAsB,YAG9B,CACID,SAAU,eACVC,MAAO,CACH,mBAAoB,UACpB,qBAAsB,YAG9B,CACID,SAAU,SACVC,MAAO,CACH,cAAe,MACf,gBAAiB,OACjB,QAAW,SAGnB,CACID,SAAU,iBACVC,MAAO,CACH,mBAAoB,UACpB,eAAgB,UAChB,qBAAsB,YAG9B,CACID,SAAU,sBACVC,MAAO,CACH,mBAAoB,UACpB,eAAgB,UAChB,qBAAsB,YAG9B,CACID,SAAU,iBACVC,MAAO,CACH,mBAAoB,OACpB,eAAgB,SAChB,eAAgB,IAGxB,CACID,SAAU,gBACVC,MAAO,CACH,qBAAsB,UACtB,eAAgB,YAGxB,CACID,SAAU,cACVC,MAAO,CACH,qBAAsB,UACtB,eAAgB,YAGxB,CACID,SAAU,oBACVC,MAAO,CACH,mBAAoB,UACpB,qBAAsB,UACtB,eAAgB,YAGxB,CACID,SAAU,kBACVC,MAAO,CACH,MAAS,UACT,eAAgB,MCjHrB,SAASC,GAAGC,GACf,OAAO,SAAUC,EAAsBC,EAA0BC,GAC7D,IAAIC,EAAOJ,EACPC,IACAG,GAAQ,IAAMH,GAElB,IAAII,EAAYD,EAChB,GAAIF,EACA,IAAK,IAAInJ,KAAOmJ,EACZ,GAAIA,EAAUI,eAAevJ,GAAM,CAC/B,IAAMX,EAAQ8J,EAAUnJ,GACJ,kBAATX,GAAsBA,EAC7BiK,GAAa,IAAMtJ,EACI,iBAATX,GAAqBA,IACnCiK,GAAa,IAAMjK,GAQnC,OAHI+J,IACAE,GAAa,IAAMF,GAEhBE,G,4ECXME,I,GA0ChBC,IAAOC,M,oLAzCS,IAAD,OACZ,OACI,yBAAKJ,UAAU,QACX,4BAAQA,UAAU,eACM,0BAAMA,UAAU,oBACZ,0BAAMA,UAAU,iBACZ,kBAAC,IAAD,CAAiBK,KAAMC,QAGnD,uBAAGN,UAAU,qBACRO,KAAKC,MAAMC,QAGpB,2BAAOT,UAAU,0DACb,+BACA,4BACI,wBAAIA,UAAU,QAAd,QACA,wBAAIA,UAAU,YACd,wBAAIA,UAAU,SAAd,WAGJ,+BACCO,KAAKC,MAAMzG,WAAWO,KAAI,SAACoG,EAAM9C,GAAP,OACvB,wBAAIlH,IAAKkH,GACL,4BAAK,EAAK4C,MAAMG,WAAWD,EAAKvI,OAChC,wBAAI6H,UAAU,WACV,4BAAQA,UAAU,2BAA2BY,QAAS,kBAAM,EAAKC,MAAMH,KACnE,0BAAMV,UAAU,iBACZ,kBAAC,IAAD,CAAiBK,KAAmB,MAAbK,EAAKvI,KAAe2I,IAAcC,SAIrE,4BAAK,EAAKP,MAAMG,WAAWD,EAAKtI,iB,4BAU1C2B,GACVwG,KAAKC,MAAMQ,QAAQjH,O,GA5CqBkH,IAAMC,W,8GCctDC,IAAUC,IAAIC,KACdF,IAAUC,IAAIE,KACdH,IAAUC,IAAIG,KAEd,IAAMC,GAAW9B,GAAG,IACd+B,GAAS/B,GAAG,UA2ZHgC,IA1ZAhC,GAAG,U,GAoCbS,IAAOC,M,GAePD,IAAOC,M,GAQPD,IAAOC,M,GAMPD,IAAOC,M,GAMPD,IAAOC,M,GAUPD,IAAOC,M,GAMPD,IAAOC,M,GASPD,IAAOC,M,GAKPD,IAAOC,M,GAaPD,IAAOC,M,GA2LPD,IAAOC,M,GAmBPD,IAAOC,M,GA0CPD,IAAOC,M,GAcPD,IAAOC,M,GAcPD,IAAOC,M,GAcPD,IAAOC,MAlZXuB,a,seAmBWC,KAA8B,K,mFAgBXlI,GACvB6G,KAAKvK,YAAc0D,EAAE8C,OAAOzG,Q,uCAcR2D,GAAe,IAAD,OAClC6G,KAAKzF,SAAWpB,EAAE8C,OAAOzG,MACzB8L,YAAW,WACP,EAAKC,iBACN,O,6CAIuBpI,GAC1B6G,KAAKwB,eAAiBrI,EAAE8C,OAAOzG,MAC/BwK,KAAKyB,e,+CAIuBtI,GAC5B6G,KAAK0B,iBAAmBvI,EAAE8C,OAAOzG,MACjCwK,KAAK2B,yB,mCAIkB,IAAD,OACtB7J,EAAckI,KAAKwB,gBAAgBI,MAAK,SAAAC,GACpC,EAAKL,eAAiBxJ,KAAKY,UAAUiJ,EAAO,KAAM,MACnDC,MAAM9B,KAAK+B,SACdjK,EAAckI,KAAK0B,kBAAkBE,MAAK,SAAAC,GACtC,EAAKH,iBAAmB1J,KAAKY,UAAUiJ,EAAO,KAAM,MACrDC,MAAM9B,KAAK+B,W,qCAKd/B,KAAKwB,eAAiBvI,EAAgB+G,KAAKwB,gBAC3CxB,KAAK0B,iBAAmBzI,EAAgB+G,KAAK0B,oB,yCAIhB,IAAD,OAC5B5J,EAAckI,KAAKwB,gBAAgBI,MAAK,SAAAtL,GACpCwB,EAAc,EAAK4J,kBAAkBE,MAAK,SAAArL,GACtC,EAAKiD,WJ4Gd,SAAgClD,EAAcC,GAkBjD,OAjBAD,EAAM4B,EAAY5B,GAClBC,EAAM2B,EAAY3B,GAgBX,CACH6B,cAhBkBkB,EAClBO,EAAevD,EAAI8B,eACnByB,EAAetD,EAAI6B,eACnB8B,GAcA5B,MAZUgB,EACVhD,EAAIgC,OAAS,GACb/B,EAAI+B,OAAS,GACbnB,GACFnB,KAAK2B,GASHU,mBARuBiB,EACvBO,EAAevD,EAAI+B,oBACnBwB,EAAetD,EAAI8B,oBACnB6B,II5H0B8H,CAAuB1L,EAAKC,MAC/CuL,MAAM,EAAKC,YACfD,MAAM9B,KAAK+B,W,8BAIH1I,GACXD,QAAQC,MAAM,oBAAqBA,K,qCAIV,IAAD,EAClB4I,EAAM,UAAGjC,KAAKqB,YAAR,aAAG,EAAWY,OAAO,CAC7BvJ,KAAM,eACNwJ,gBAAiB,IACjBC,QAAS,MACTC,gBAAiB,WACjBC,kBAAmB,IACnBC,WAAW,IAET,OAANL,QAAM,IAANA,KAAQM,Q,iCAIMC,GACdxC,KAAKwC,KAAOA,EACZxC,KAAKyB,e,+BAGQ,IAAD,OACNjH,EAAWwF,KAAKvB,KACtB,OACI,yBAAKgB,UAAU,OACX,yBAAKA,UAAU,WACX,wBAAIA,UAAU,SAAd,wBACA,wBAAIA,UAAU,YAAd,2EAIJ,yBAAKA,UAAU,WACX,yBAAKA,UAAU,iDACX,4BACI,wBAAIA,UAAWwB,GAAS,GAAI,CAAC,YAAajB,KAAKyC,oBAC3C,uBAAGC,KAAK,IAAIrC,QAAS,kBAAM,EAAKsC,WAAW,gBACvC,0BAAMlD,UAAU,iBACV,kBAAC,IAAD,CAAiBK,KAAM8C,OAE7B,sDAGR,wBAAInD,UAAWwB,GAAS,GAAI,CAAC,YAAajB,KAAK6C,oBAC3C,uBAAGH,KAAK,IAAIrC,QAAS,kBAAM,EAAKsC,WAAW,gBACvC,0BAAMlD,UAAU,iBACV,kBAAC,IAAD,CAAiBK,KAAMgD,OAE7B,wDAKhB,yBAAKrD,UAAU,WACX,yBAAKA,UAAWyB,GAAO,GAAI,CAAC,eAAgBlB,KAAK6C,oBAC7C,yBAAKpD,UAAU,yBACX,4BAAQA,UAAU,eACd,uBAAGA,UAAU,qBAAb,0BAGA,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,WACX,4BAAQA,UAAU,6BAA6BY,QAASL,KAAK+C,YACzD,0BAAMtD,UAAU,iBACZ,kBAAC,IAAD,CAAiBK,KAAMkD,OAE3B,yCAEJ,4BAAQvD,UAAU,6BAA6BY,QAASL,KAAKiD,cACzD,0BAAMxD,UAAU,iBACZ,kBAAC,IAAD,CAAiBK,KAAMoD,OAE3B,8CAKhB,yBAAKzD,UAAU,gBACX,yBAAKA,UAAU,WACX,8BAAUA,UAAU,WAAW0D,SAAUnD,KAAKoD,uBACpC5N,MAAOwK,KAAKwB,eAAgB6B,YAAY,QAMjErD,KAAKyC,kBAAqB,yBAAKhD,UAAU,wBAClC,yBAAKA,UAAU,yBACX,4BAAQA,UAAU,eACd,uBAAGA,UAAU,qBAAb,4BAGA,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,WACX,4BAAQA,UAAU,6BACVY,QAASL,KAAK+C,YACtB,0BAAMtD,UAAU,iBACZ,kBAAC,IAAD,CAAiBK,KAAMkD,OAEvB,yCAEJ,4BAAQvD,UAAU,6BACVY,QAASL,KAAKiD,cAClB,0BAAMxD,UAAU,iBACZ,kBAAC,IAAD,CAAiBK,KAAMoD,OAE3B,8CAKhB,yBAAKzD,UAAU,gBACX,yBAAKA,UAAU,WACf,8BAAUA,UAAU,WAAW0D,SAAUnD,KAAKsD,yBACpC9N,MAAOwK,KAAK0B,iBAAkB2B,YAAY,QAMnErD,KAAK6C,kBAAqB,yBAAKpD,UAAU,UAClC,yBAAKA,UAAU,yBACX,4BAAQA,UAAU,eACd,uBAAGA,UAAU,qBAAb,iBAGA,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,WACX,yBAAKA,UAAU,mBACX,4BAAQ0D,SAAUnD,KAAKuD,iBAAkB/N,MAAOwK,KAAKzF,UACjD,4BAAQ/E,MAAM,UAAd,UACA,4BAAQA,MAAM,WAAd,cAIZ,yBAAKiK,UAAU,WACX,2BAAO+D,KAAK,OAAO/D,UAAU,iBACtBgE,YAAY,kBACZN,SAAUnD,KAAK0D,oBACflO,MAAOwK,KAAKvK,eAEvB,yBAAKgK,UAAU,WACX,4BAAQA,UAAU,4BACVY,QAASL,KAAKuB,cAClB,0BAAM9B,UAAU,iBACZ,kBAAC,IAAD,CAAiBK,KAAM6D,OAE3B,8CAMpB,yBAAKlE,UAAU,gBACX,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAoBjF,SAAUA,EAAUwE,WAAYA,GAChCS,UAAU,QACVmE,GAAI5D,KAAK6D,gBAQxD7D,KAAKyC,kBACF,yBAAKhD,UAAU,WACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,gBACX,kBAAC,GAAD,CAAiBS,MAAM,iBAAiB1G,WAAYwG,KAAKxG,WAAWpB,cACnDgI,WAAYJ,KAAK8D,aACjBrD,QAAST,KAAK+D,qBAEnC,yBAAKtE,UAAU,gBACX,kBAAC,GAAD,CAAiBS,MAAM,QAAQ1G,WAAYwG,KAAKxG,WAAWlB,MAC1C8H,WAAYJ,KAAKgE,WACjBvD,QAAST,KAAKiE,aAEnC,yBAAKxE,UAAU,gBACX,kBAAC,GAAD,CAAiBS,MAAM,sBACN1G,WAAYwG,KAAKxG,WAAWnB,mBAC5B+H,WAAYJ,KAAK8D,aACjBrD,QAAST,KAAKkE,+B,gCASzC3G,EAAe/H,EAAe0J,GAC5C,OACI,yBAAKO,UAAU,WACX,yBAAKA,UAAU,mBACX,0BAAMA,UAAU,OAAOlC,GACvB,0BAAMkC,UAAW,UAAYP,GAAQ1J,O,mCAOhCgD,GACjB,OACI,yBAAKiH,UAAU,0CACJ,OAANjH,QAAM,IAANA,OAAA,EAAAA,EAAQE,OACLsH,KAAKmE,UAAU,UAAW3L,EAAOE,KAAM,SAEpC,OAANF,QAAM,IAANA,OAAA,EAAAA,EAAQG,QAAR,OAAgBH,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAQG,KAAKoB,KAAI,SAACqK,EAAM/G,GAAP,OAC9B,yBAAKoC,UAAU,UAAUtJ,IAAKkH,GAC1B,yBAAKoC,UAAU,mBACX,0BAAMA,UAAW,kBAAmB2E,EAAKnK,SAASoK,KAAK,OACvD,0BAAM5E,UAAW,iBAAkB2E,EAAK3L,QAAQ4L,KAAK,gB,iCAS1DvL,GACf,OACI,yBAAK2G,UAAU,0CACN,OAAJ3G,QAAI,IAAJA,OAAA,EAAAA,EAAMvB,QACHyI,KAAKmE,UAAU,QAASrL,EAAKvB,MAAO,UAEnC,OAAJuB,QAAI,IAAJA,OAAA,EAAAA,EAAMxB,UACH0I,KAAKmE,UAAU,UAAWrL,EAAKxB,QAAS,YAEvC,OAAJwB,QAAI,IAAJA,OAAA,EAAAA,EAAMtB,SACHwI,KAAKmE,UAAU,SAAUrL,EAAKtB,OAAQ,SAErC,OAAJsB,QAAI,IAAJA,OAAA,EAAAA,EAAMrB,cACHuI,KAAKmE,UAAU,cAAerL,EAAKrB,YAAa,SAE/C,OAAJqB,QAAI,IAAJA,OAAA,EAAAA,EAAMpB,cACHsI,KAAKmE,UAAU,cAAerL,EAAKpB,YAAa,a,mCAO5DsI,KAAKsE,mBACLtE,KAAK2B,yB,yCAGmB,IAAD,OACnB3B,KAAK6C,kBACLvB,YAAW,WACP,EAAKC,iBACN,O,6CAKHvB,KAAKyC,kBACLzC,KAAKuE,qB,wCAKapE,GAAgC,IAAD,OACjDA,EAAKvI,KACLE,EAAckI,KAAK0B,kBAAkBE,MAAK,SAAAC,GACtC,EAAKH,iBAAmBnJ,EAAgBsJ,EAAO1B,EAAKvI,SACrDkK,MAAM9B,KAAK+B,SACP5B,EAAKtI,OACZC,EAAckI,KAAKwB,gBAAgBI,MAAK,SAAAC,GACpC,EAAKL,eAAiBjJ,EAAgBsJ,EAAO1B,EAAKtI,UACnDiK,MAAM9B,KAAK+B,SAElB/B,KAAKyB,e,gCAIStB,GAAyB,IAAD,OAClCA,EAAKvI,KACLE,EAAckI,KAAK0B,kBAAkBE,MAAK,SAAAC,GACtC,EAAKH,iBAAmB7I,EAAQgJ,EAAO1B,EAAKvI,SAC7CkK,MAAM9B,KAAK+B,SACP5B,EAAKtI,OACZC,EAAckI,KAAKwB,gBAAgBI,MAAK,SAAAC,GACpC,EAAKL,eAAiB3I,EAAQgJ,EAAO1B,EAAKtI,UAC3CiK,MAAM9B,KAAK+B,SAElB/B,KAAKyB,e,6CAIsBtB,GAAgC,IAAD,OACtDA,EAAKvI,KACLE,EAAckI,KAAK0B,kBAAkBE,MAAK,SAAAC,GACtC,EAAKH,iBAAmB1I,EAAqB6I,EAAO1B,EAAKvI,SAC1DkK,MAAM9B,KAAK+B,SACP5B,EAAKtI,OACZC,EAAckI,KAAKwB,gBAAgBI,MAAK,SAAAC,GACpC,EAAKL,eAAiBxI,EAAqB6I,EAAO1B,EAAKtI,UACxDiK,MAAM9B,KAAK+B,SAElB/B,KAAKyB,e,8BAIOJ,GACZrB,KAAKqB,KAAOA,I,2BA7XZ,IACI,OAAOlH,GAAkBnC,KAAKC,MAAM+H,KAAKwB,gBAAiB,CACtD/L,YAAauK,KAAKvK,YAClB8E,SAAUyF,KAAKzF,WAErB,MAAOpB,GAEL,OADAC,QAAQiB,IAAI,+BAAgClB,GACrC,M,uCAWX,MAAqB,eAAd6G,KAAKwC,O,uCAKZ,MAAqB,eAAdxC,KAAKwC,S,GA7CF9B,IAAMC,W,8CACnB6D,K,wEACgC,kB,gDAChCA,K,wEACkC,M,2CAClCA,K,wEAC6B,M,wCAC7BA,K,wEAC0B,Y,0CAC1BA,K,wEACuC,CACpCpM,cAAe,GACfE,MAAO,GACPD,mBAAoB,O,oCAEvBmM,K,wEACsB,gB,iCAItBC,K,sPAkBAA,K,4HAKAA,K,w5DCnEeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,GAAOC,SAASC,eAAe,QACrCC,IAASC,OAAO,kBAAC,GAAD,MAAQJ,IDoIlB,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAM1D,MAAK,SAAA2D,GACjCA,EAAaC,kB","file":"static/js/main.ae13585e.chunk.js","sourcesContent":["import Rule from \"../model/Rule\";\nimport Cytoscape from \"cytoscape\";\nimport Routing, {Filters} from \"../model/Routing\";\nimport Edge from \"../model/Edge\";\nimport Node from \"../model/Node\";\nimport Filter from \"../model/Filter\";\nimport Comparator from \"./Comparator\";\nimport Difference from \"./Difference\";\nimport RoutingDifference from \"./RoutingDifference\";\nimport NamedFilter from \"../model/NamedFilter\";\n\nfunction validate(value: string, searchQuery: string): boolean {\n    return value.toLowerCase().includes(searchQuery.toLowerCase())\n}\n\nexport function validateRule(rule: Rule, searchQuery: string): boolean {\n    if (rule.source && validate(rule.source, searchQuery)) {\n        return true;\n    }\n    if (rule.request && validate(rule.request, searchQuery)) {\n        return true;\n    }\n    if (rule.group && validate(rule.group, searchQuery)) {\n        return true;\n    }\n    if (rule.destination && validate(rule.destination, searchQuery)) {\n        return true;\n    }\n    if (rule.application && validate(rule.application, searchQuery)) {\n        return true;\n    }\n    return false;\n}\n\ninterface ConversionConfig {\n    searchQuery: string,\n    viewType: string;\n}\n\nfunction sortObject(input: any): any {\n    return Object.keys(input).sort().reduce((output, key) => {\n        output[key] = input[key];\n        return output;\n    }, {} as any);\n}\n\nfunction compositeComparator<T>(comparators: Comparator<T>[]): Comparator<T> {\n    return (lhs, rhs) => {\n        for (let i = 0; i < comparators.length; ++i) {\n            const result = comparators[i](lhs, rhs);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\n\nfunction nullFirstComparator<T>(comparator: Comparator<T>): Comparator<T | undefined> {\n    return (lhs, rhs) => {\n        if (lhs == null) {\n            return rhs == null ? 0 : 1;\n        }\n        if (rhs == null) {\n            return -1;\n        }\n        return comparator(lhs, rhs);\n    }\n}\n\n/**\n * String comparator\n *\n * @param lhs the left value\n * @param rhs the right value\n */\nconst stringComparator = (lhs: string, rhs: string) => lhs.localeCompare(rhs);\n\n/**\n * Returns the array comparator based on item comparator\n *\n * @param comparator the item comparator\n */\nfunction arrayComparator<T>(comparator: Comparator<T>): Comparator<T[] | undefined> {\n    return nullFirstComparator(\n        (lhs, rhs) => {\n            if (lhs === rhs) {\n                return 0;\n            }\n            if (lhs.length !== rhs.length) {\n                return lhs.length - rhs.length\n            }\n            const length = lhs.length;\n            for (let i = 0; i < length; ++i) {\n                const c = comparator(lhs[i], rhs[i]);\n                if (c !== 0) {\n                    return c;\n                }\n            }\n            return 0;\n        }\n    )\n}\n\n/**\n * The string array comparator\n */\nconst stringArrayComparator = arrayComparator(stringComparator);\n\nconst propertyComparator: Comparator<string | undefined> = nullFirstComparator(\n    (lhs, rhs) => stringArrayComparator(\n        lhs.split(\".\", 2),\n        rhs.split(\".\", 2)\n    )\n);\n\nconst ruleComparator: Comparator<Rule | undefined> = nullFirstComparator(compositeComparator([\n    (a, b) => propertyComparator(a.request, b.request),\n    (a, b) => propertyComparator(a.group, b.group),\n    (a, b) => propertyComparator(a.source, b.source),\n    (a, b) => propertyComparator(a.destination, b.destination),\n    (a, b) => propertyComparator(a.application, b.application),\n]));\n\nconst ruleDifferenceComparator: Comparator<Difference<Rule> | undefined> = nullFirstComparator((lhs, rhs) => ruleComparator(\n    lhs.left || lhs.right,\n    rhs.left || rhs.right\n));\n\nexport async function updateRouting(json: string): Promise<Routing> {\n    return JSON.parse(json);\n}\n\nexport function sortRouting(routing: Routing): Routing {\n    const result: Routing = {};\n    if (routing?.sourceFilters) {\n        result.sourceFilters = sortObject(routing.sourceFilters)\n    }\n    if (routing?.destinationFilters) {\n        result.destinationFilters = sortObject(routing.destinationFilters)\n    }\n    result.rules = routing.rules?.sort(ruleComparator);\n    return result;\n}\n\nexport function addSourceFilter(routing: Routing, filter: NamedFilter): string {\n    const filters = routing.sourceFilters || {};\n    filters[filter.name] = filter.body;\n    routing.sourceFilters = filters;\n    return JSON.stringify(routing, null, 4)\n}\n\nexport function addRule(routing: Routing, rule: Rule): string {\n    const rules = routing.rules || [];\n    rules.push(rule);\n    routing.rules = rules;\n    return JSON.stringify(routing, null, 4)\n}\n\nexport function addDestinationFilter(routing: Routing, filter: NamedFilter): string {\n    const filters = routing.destinationFilters || {};\n    filters[filter.name] = filter.body;\n    routing.destinationFilters = filters;\n    return JSON.stringify(routing, null, 4)\n}\n\nexport function simplifyRouting(json: string): string {\n    try {\n        const model: Routing = JSON.parse(json);\n        const newModel: Routing = sortRouting(model);\n        return JSON.stringify(newModel, null, 4)\n    } catch (e) {\n        console.error(\"Error in JSON simplifying\", e);\n    }\n    return json;\n}\n\n/**\n * Builds the difference between 2 arrays\n *\n * @param left the left items\n * @param right the right items\n * @param comparator the item comparator\n */\nfunction buildDifference<T>(left: T[], right: T[], comparator: Comparator<T>): Difference<T>[] {\n    const matched: T[] = [];\n    const difference: Difference<T>[] = [];\n    left.forEach(a => {\n        let found = false;\n        right.forEach(b => {\n            if (comparator(a, b) === 0) {\n                matched.push(b);\n                found = true;\n            }\n        });\n        if (!found) {\n            difference.push({\n                left: a,\n                right: undefined\n            })\n        }\n    });\n    right.forEach(a => {\n        const found: boolean = matched.find(b => comparator(a, b) === 0) != null;\n        if (!found) {\n            difference.push({\n                left: undefined,\n                right: a\n            })\n        }\n    });\n    return difference;\n}\n\nfunction toNamedFilters(filters?: Filters): NamedFilter[] {\n    let temp = filters || {};\n    return Object.keys(temp).map(key => ({\n        name: key,\n        body: temp[key]\n    }));\n}\n\nconst filterComparator: Comparator<Filter[] | undefined> = nullFirstComparator(arrayComparator(compositeComparator([\n    (lhs, rhs) => stringArrayComparator(lhs!.requests, rhs!.requests),\n    (lhs, rhs) => stringArrayComparator(lhs!.filters, rhs!.filters),\n])));\n\nconst namedFilterComparator: Comparator<NamedFilter | undefined> = nullFirstComparator(compositeComparator([\n    (lhs, rhs) => propertyComparator(lhs!.name, rhs!.name),\n    (lhs, rhs) => filterComparator(lhs!.body, rhs!.body)\n]));\n\nexport function buildRoutingDifference(lhs: Routing, rhs: Routing): RoutingDifference {\n    lhs = sortRouting(lhs);\n    rhs = sortRouting(rhs);\n    const sourceFilters = buildDifference(\n        toNamedFilters(lhs.sourceFilters),\n        toNamedFilters(rhs.sourceFilters),\n        namedFilterComparator\n    );\n    const rules = buildDifference(\n        lhs.rules || [],\n        rhs.rules || [],\n        ruleComparator\n    ).sort(ruleDifferenceComparator);\n    const destinationFilters = buildDifference(\n        toNamedFilters(lhs.destinationFilters),\n        toNamedFilters(rhs.destinationFilters),\n        namedFilterComparator\n    );\n    return {\n        sourceFilters: sourceFilters,\n        rules: rules,\n        destinationFilters: destinationFilters\n    }\n}\n\nexport function routingToElements(routing: Routing, config: ConversionConfig): Cytoscape.ElementDefinition[] {\n    console.log(\"Converting the routing JSON to graph elements is started\");\n    const isComplexViewType = config.viewType === \"complex\";\n    const elements: Cytoscape.ElementDefinition[] = [];\n    const nodes = new Map<string, Node>();\n    const routesMap = new Map<string, Map<string, Edge[]>>();\n    const incomingEdgesCount = new Map<string, number>();\n\n    function getSourceFilters(adapter: string): Filter[] {\n        return ((routing.sourceFilters || {})[adapter] || []);\n    }\n\n    function getDestinationFilters(adapter: string): Filter[] {\n        return ((routing.destinationFilters || {})[adapter] || []);\n    }\n\n    function getUniqueRequests(filters: Filter[]): Set<string> {\n        const requests = new Set<string>();\n        filters.forEach(filter => {\n            filter.requests.forEach(it => requests.add(it));\n        });\n        return requests;\n    }\n\n    function putNode(node: Node): Node {\n        const existed = nodes.get(node.id);\n        if (existed != null) {\n            return existed;\n        }\n        nodes.set(node.id, node);\n        if (!node.id.startsWith(\"adapter_\")) {\n            return node;\n        }\n        if (!isComplexViewType) {\n            return node;\n        }\n        const hasSourceFilters = getSourceFilters(node.name).length > 0;\n        const hasDestinationFilters = getDestinationFilters(node.name).length > 0;\n        const hasAnyFilters = hasSourceFilters || hasDestinationFilters;\n        if (hasAnyFilters) {\n            let rootId = \"root_\" + node.id;\n            putNode({id: rootId, name: node.name, parentId: node.id});\n            node.rootId = rootId;\n            // if (hasSourceFilters) {\n            //     const blockId = \"block_outgoing_\" + node.id;\n            //     putNode({id: blockId, name: \"[filterRequest]\", parentId: node.id});\n            // }\n            // if (hasDestinationFilters) {\n            //     const blockId = \"block_incoming_\" + node.id;\n            //     putNode({id: blockId, name: \"[filterResponse]\", parentId: node.id});\n            // }\n        }\n        return node;\n    }\n\n    const putEdge = (edge: Edge): void => {\n        let map = routesMap.get(edge.source);\n        if (map == null) {\n            map = new Map<string, Edge[]>();\n            routesMap.set(edge.source, map);\n        }\n        let array = map.get(edge.target);\n        let count = incomingEdgesCount.get(edge.target) || 0;\n        if (array == null) {\n            array = [];\n            map.set(edge.target, array)\n        }\n        incomingEdgesCount.set(edge.target, count + 1);\n        array.push(edge);\n    };\n    const findFilters = (adapter: string, request: string, filters?: Filters): string[] => {\n        const current = (filters || {})[adapter] || [];\n        const result: string[] = [];\n        current.forEach(filter => {\n            if (filter.requests.includes(\"*\") || filter.requests.includes(request)) {\n                filter.filters.forEach(it => result.push(it))\n            }\n        });\n        return result;\n    };\n    const putComplexEdge = (newSource: Node, newTarget: Node, newRequest: string): void => {\n        // if (!validate(newSource.name, config.searchQuery) && !validate(newTarget.name, config.searchQuery) && !validate(newRequest, config.searchQuery)) {\n        //     return;\n        // }\n        const source = putNode(newSource);\n        const target = putNode(newTarget);\n        const sourceId = source.rootId || source.id;\n        const targetId = target.rootId || target.id;\n        let currentId = sourceId;\n\n        /*function calculateFiltersCount(filters: string[]): Map<string, number> {\n            let filterCount = new Map<string, number>();\n            filters.forEach(filterName => {\n                let index = filterCount.get(filterName);\n                if (index == null) {\n                    index = 1;\n                } else {\n                    index++;\n                }\n                filterCount.set(filterName, index);\n            });\n            return filterCount;\n        }*/\n\n        function findRequestRenamingLike(filters: string[]): number {\n            return filters.findIndex(it => it.toLowerCase().includes(\"requestRenaming\".toLowerCase()));\n        }\n\n        function buildOutgoingPath(startId: string, sourceFilters: string[], destinationFilters: string[], edgeLabel: string): string {\n            const filters: string[] = sourceFilters;//[...sourceFilters, ...destinationFilters];\n            const blockId = \"block_outgoing_\" + source.id;\n            if (filters.length > 0) {\n                putNode({id: blockId, name: \"Outgoing Filters\", parentId: source.id});\n            }\n            let tempId = startId;\n            const requestRenamingLike = findRequestRenamingLike(filters);\n            const hasRequestRenamingLike = requestRenamingLike >= 0;\n            filters.forEach((filterName, index) => {\n                const filterId = \"filter_outgoing_\" + source.id + \"_\" + filterName + \"_\" + index;\n                putNode({id: filterId, name: filterName, parentId: blockId});\n                if (!hasRequestRenamingLike || requestRenamingLike >= index) {\n                    putEdge({source: tempId, target: filterId, label: edgeLabel});\n                } else {\n                    putEdge({source: tempId, target: filterId, label: edgeLabel, implicitLabel: true});\n                }\n                tempId = filterId;\n                ++index;\n            });\n            return tempId;\n        }\n\n        function buildIncomingPath(startId: string, sourceFilters: string[], destinationFilters: string[], edgeLabel: string): string {\n            const filters = destinationFilters;//[...sourceFilters, ...destinationFilters].reverse();\n            let blockId = \"block_incoming_\" + target.id;\n            if (filters.length > 0) {\n                putNode({id: blockId, name: \"Incoming Filters\", parentId: target.id});\n            }\n            let tempId = startId;\n            filters.forEach((filterName, index) => {\n                let filterId = \"filter_incoming_\" + target.id + \"_\" + filterName + \"_\" + index;\n                putNode({id: filterId, name: filterName, parentId: blockId});\n                putEdge({source: tempId, target: filterId, label: edgeLabel});\n                tempId = filterId\n            });\n            return tempId;\n        }\n\n        if (source.rootId) {\n            const sourceFilters = findFilters(source.name, newRequest, routing.sourceFilters);\n            const destinationFilters = findFilters(source.name, newRequest, routing.destinationFilters);\n            currentId = buildOutgoingPath(currentId, sourceFilters, destinationFilters, newRequest);\n        }\n        if (target.rootId) {\n            const sourceFilters = findFilters(target.name, newRequest, routing.sourceFilters);\n            const destinationFilters = findFilters(target.name, newRequest, routing.destinationFilters);\n            currentId = buildIncomingPath(currentId, sourceFilters, destinationFilters, newRequest);\n        }\n        putEdge({source: currentId, target: targetId, label: newRequest});\n    };\n\n    function defineAdapter(name: string): Node {\n        return {\n            id: \"adapter_\" + name,\n            name: name\n        }\n    }\n\n    function defineApplication(name: string): Node {\n        return {\n            id: \"application_\" + name,\n            name: name\n        }\n    }\n\n    const ruleIncomingRequests = new Set<string>();\n    routing.rules?.forEach(rule => {\n        if (rule.request) {\n            ruleIncomingRequests.add(rule.request);\n        }\n    });\n    Object.entries(routing.sourceFilters || {}).forEach(entry => {\n        const [adapterName, filters] = entry;\n        const adapter = defineAdapter(adapterName);\n        getUniqueRequests(filters).forEach(requestName => {\n            if (!ruleIncomingRequests.has(requestName)) {\n                if (!validate(adapterName, config.searchQuery) && !validate(requestName, config.searchQuery)) {\n                    return;\n                }\n                if (requestName === \"*\" && !isComplexViewType) {\n                    return;\n                }\n                const requestId = \"request_outgoing_\" + adapter.id + \"_\" + requestName;\n                putComplexEdge(adapter, {id: requestId, name: requestName}, requestName);\n            }\n        });\n    });\n    Object.entries(routing.destinationFilters || {}).forEach(entry => {\n        const [adapterName, filters] = entry;\n        const adapter = defineAdapter(adapterName);\n        getUniqueRequests(filters).forEach(requestName => {\n            if (!ruleIncomingRequests.has(requestName)) {\n                if (!validate(adapterName, config.searchQuery) && !validate(requestName, config.searchQuery)) {\n                    return;\n                }\n                if (requestName === \"*\" && !isComplexViewType) {\n                    return;\n                }\n                const requestId = \"request_incoming_\" + adapter.id + \"_\" + requestName;\n                putComplexEdge({id: requestId, name: requestName}, adapter, requestName);\n            }\n        });\n    });\n    routing.rules?.forEach(rule => {\n        if (!validateRule(rule, config.searchQuery)) {\n            return;\n        }\n        // edges\n        const request = rule.request || \"\";\n        if (rule.source && rule.destination) {\n            putComplexEdge(defineAdapter(rule.source), defineAdapter(rule.destination), request);\n        }\n        if (rule.source && rule.application) {\n            putComplexEdge(defineAdapter(rule.source), defineApplication(rule.application), request);\n        }\n        if (!rule.source) {\n            if (rule.destination) {\n                if (rule.group) {\n                    const adapter = defineAdapter(rule.destination);\n                    putComplexEdge({\n                        id: \"group_\" + rule.group,\n                        name: rule.group\n                    }, adapter, request);\n                } else if (rule.request) {\n                    const adapter = defineAdapter(rule.destination);\n                    putComplexEdge({\n                        id: \"request_incoming_\" + adapter.id + \"_\" + rule.request,\n                        name: rule.request\n                    }, adapter, request);\n                }\n            } else if (rule.application) {\n                if (rule.group) {\n                    const application = defineApplication(rule.application);\n                    putComplexEdge({\n                        id: \"group_\" + rule.group,\n                        name: rule.group\n                    }, application, request);\n                } else if (rule.request) {\n                    const application = defineApplication(rule.application);\n                    putComplexEdge({\n                        id: \"request_incoming_\" + application.id + \"_\" + rule.request,\n                        name: rule.request\n                    }, application, request);\n                }\n            }\n        }\n    });\n    /*let componentIdx = 0;\n    const list = Array.from(nodes.values()).sort((lhs: Node , rhs: Node) => {\n        const left = incomingEdgesCount.get(lhs.id) || 0;\n        const right = incomingEdgesCount.get(rhs.id) || 0;\n        return right - left;\n    });\n\n    const dfs = (source: Node, componentId: string) => {\n        console.log(\"DFS\", source, componentId);\n        if (source.parentId) {\n            return;\n        }\n        source.parentId = componentId;\n        const children = routesMap.get(source.id);\n        if (children === null) {\n            return;\n        }\n        children.forEach((edges, targetId) => {\n            const target = nodes.get(targetId);\n            if (target === null) {\n                return;\n            }\n            dfs(target, componentId)\n        });\n    };\n    list.forEach(node => {\n        if (node.parentId) {\n            return;\n        }\n        dfs(node, \"component_\" + componentIdx);\n        ++componentIdx;\n    });\n\n    for (let i = 0; i < componentIdx; ++i) {\n        putNode({id: \"component_\" + i, name: \"Component #\" + i})\n    }*/\n\n    const calculateSize = (name: string): number => {\n        return Math.min((incomingEdgesCount.get(name) || 1) * 10 + 20, 100);\n    };\n    nodes.forEach(node => {\n        const size = calculateSize(node.id);\n        let defaultStyle = {};\n        let classes: string[] = [];\n        let label = node.name;\n        if (node.id.startsWith(\"adapter_\")) {\n            if (isComplexViewType && node.rootId) {\n                classes = [\"block\", \"block-adapter\"];\n                label = \"\";\n            } else {\n                classes = [\"node\", \"node-adapter\"];\n            }\n        } else if (node.id.startsWith(\"request_\")) {\n            classes = [\"node-implicit\", \"node-request\"];\n            label = \"\";\n        } else if (node.id.startsWith(\"group_\")) {\n            classes = [\"node\", \"node-implicit\", \"node-group\"]\n        } else if (node.id.startsWith(\"application_\")) {\n            classes = [\"node\", \"node-application\"]\n        } else if (node.id.startsWith(\"block_\")) {\n            classes = [\"block\", \"block-filter-group\"];\n        } else if (node.id.startsWith(\"filter_\")) {\n            classes = [\"node\", \"node-filter\"];\n        } else if (node.id.startsWith(\"root_adapter_\")) {\n            classes = [\"node\", \"node-adapter\"];\n        }\n        elements.push({\n            data: {\n                id: node.id,\n                label: label,\n                parent: node.parentId\n            },\n            css: {\n                ...defaultStyle,\n                width: size,\n                height: size\n            },\n            classes: classes as any\n        })\n    });\n    routesMap.forEach((targets, source) => {\n        targets.forEach(edges => {\n            edges.forEach(edge => {\n                elements.push({\n                    data: {\n                        source: edge.source,\n                        target: edge.target,\n                        label: edge.label\n                    },\n                    classes: (edge.implicitLabel === true ? \"implicit_label\" : undefined)\n                })\n            })\n        });\n    });\n    console.log(\"Converting the routing JSON to graph elements is finished\");\n    return elements;\n}","export const stylesheet = [\n    {\n        selector: 'node',\n        style: {\n            label: 'data(label)',\n            \"font-size\": \"10px\",\n            'color': '#ecf0f1',\n            \"text-outline-color\": \"#34495e\",\n            'text-outline-width': 1,\n            \"text-valign\": \"center\",\n            \"text-halign\": \"center\",\n            \"border-width\": 0\n        }\n    },\n    {\n        selector: 'edge',\n        style: {\n            'label': 'data(label)',\n            'text-rotation': 'autorotate',\n            \"line-color\": \"#bdc3c7\",\n            width: 1,\n            \"font-size\": \"8px\",\n            'color': '#34495e',\n            \"arrow-scale\": 2,\n            \"mid-target-arrow-shape\": \"vee\",\n            \"target-arrow-shape\": \"vee\",\n            \"mid-target-arrow-color\": \"#2ecc71\",\n            \"target-arrow-color\": \"#2ecc71\",\n            \"target-distance-from-node\": \"5px\",\n            \"curve-style\": \"bezier\"\n        }\n    },\n    {\n        selector: ':parent',\n        style: {\n            'background-opacity': 0.1,\n            \"border-width\": 1,\n        }\n    },\n    {\n        selector: \".node\",\n        style: {}\n    },\n    {\n        selector: \".node-adapter\",\n        style: {\n            \"background-color\": \"#3498db\",\n            'text-outline-color': \"#2980b9\"\n        }\n    },\n    {\n        selector: \".node-filter\",\n        style: {\n            \"background-color\": \"#1abc9c\",\n            'text-outline-color': \"#16a085\"\n        }\n    },\n    {\n        selector: \".block\",\n        style: {\n            \"text-valign\": \"top\",\n            \"text-margin-y\": \"15px\",\n            \"padding\": \"20px\"\n        }\n    },\n    {\n        selector: \".block-adapter\",\n        style: {\n            \"background-color\": \"#3498db\",\n            'border-color': \"#2980b9\",\n            'text-outline-color': \"#2980b9\"\n        }\n    },\n    {\n        selector: \".block-filter-group\",\n        style: {\n            \"background-color\": \"#f1c40f\",\n            'border-color': \"#f39c12\",\n            'text-outline-color': \"#f39c12\"\n        }\n    },\n    {\n        selector: \".node-implicit\",\n        style: {\n            \"background-color\": \"#fff\",\n            \"border-style\": \"dashed\",\n            \"border-width\": 3\n        }\n    },\n    {\n        selector: '.node-request',\n        style: {\n            'text-outline-color': \"#d35400\",\n            \"border-color\": \"#e67e22\",\n        }\n    },\n    {\n        selector: '.node-group',\n        style: {\n            'text-outline-color': \"#8e44ad\",\n            \"border-color\": \"#9b59b6\",\n        }\n    },\n    {\n        selector: '.node-application',\n        style: {\n            \"background-color\": \"#e74c3c\",\n            'text-outline-color': \"#c0392b\",\n            \"border-color\": \"#c0392b\",\n        }\n    },\n    {\n        selector: '.implicit_label',\n        style: {\n            'color': '#7f8c8d',\n            \"text-opacity\": 0.5\n        }\n    }\n];","type ModifiersMap = { [key: string]: boolean | string };\n\nexport function cn(blockName: string) {\n    return function (elementName?: string, modifiers?: ModifiersMap, custom?: string): string {\n        let base = blockName;\n        if (elementName) {\n            base += \"-\" + elementName;\n        }\n        let className = base;\n        if (modifiers) {\n            for (let key in modifiers) {\n                if (modifiers.hasOwnProperty(key)) {\n                    const value = modifiers[key];\n                    if (typeof value == \"boolean\" && value) {\n                        className += \" \" + key;\n                    } else if (typeof value == \"string\" && value) {\n                        className += \" \" + value;\n                    }\n                }\n            }\n        }\n        if (custom) {\n            className += \" \" + custom;\n        }\n        return className;\n    }\n}","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faAngleLeft, faAngleRight, faRoute} from \"@fortawesome/free-solid-svg-icons\";\nimport Difference from \"../util/Difference\";\nimport {action} from \"mobx\";\n\ninterface Properties<T> {\n    title: any;\n    difference: Difference<T>[];\n    renderItem: (item?: T) => any;\n    onMerge: (diff: Difference<T>) => void;\n}\n\nexport default class DifferenceTable<T> extends React.Component<Properties<T>, any> {\n    public render() {\n        return (\n            <div className=\"card\">\n                <header className=\"card-header\">\n                                        <span className=\"card-header-icon\">\n                                            <span className=\"icon is-small\">\n                                                <FontAwesomeIcon icon={faRoute}/>\n                                            </span>\n                                        </span>\n                    <p className=\"card-header-title\">\n                        {this.props.title}\n                    </p>\n                </header>\n                <table className=\"table is-hoverable is-fullwidth is-striped is-bordered\">\n                    <thead>\n                    <tr>\n                        <th className=\"left\">Left</th>\n                        <th className=\"actions\"/>\n                        <th className=\"right\">Right</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.props.difference.map((diff, index) => (\n                        <tr key={index}>\n                            <td>{this.props.renderItem(diff.left)}</td>\n                            <td className=\"actions\">\n                                <button className=\"button is-small is-light\" onClick={() => this.merge(diff)}>\n                                    <span className=\"icon is-small\">\n                                        <FontAwesomeIcon icon={diff.left == null ? faAngleLeft : faAngleRight}/>\n                                    </span>\n                                </button>\n                            </td>\n                            <td>{this.props.renderItem(diff.right)}</td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    @action.bound\n    private merge(difference: Difference<any>) {\n        this.props.onMerge(difference)\n    }\n}","import React from 'react';\nimport {action, computed, observable} from \"mobx\";\nimport {observer} from \"mobx-react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faImage, faMagic, faPencilAlt, faStream, faSync} from '@fortawesome/free-solid-svg-icons'\nimport Cytoscape from 'cytoscape';\nimport CoseBilkentLayout from 'cytoscape-cose-bilkent';\nimport EulerLayout from 'cytoscape-euler';\nimport KlayLayout from 'cytoscape-klay';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport {\n    addDestinationFilter,\n    addRule,\n    addSourceFilter,\n    buildRoutingDifference,\n    routingToElements,\n    simplifyRouting,\n    updateRouting\n} from \"../util/ModelUtils\";\nimport {stylesheet} from \"../config/AppConfig\";\nimport RoutingDifference from \"../util/RoutingDifference\";\nimport {cn} from \"../util/Bulma\";\nimport Difference from \"../util/Difference\";\nimport Rule from \"../model/Rule\";\nimport NamedFilter from \"../model/NamedFilter\";\nimport DifferenceTable from \"./DifferenceTable\";\n\nCytoscape.use(CoseBilkentLayout);\nCytoscape.use(EulerLayout);\nCytoscape.use(KlayLayout);\n\nconst modifier = cn(\"\");\nconst column = cn(\"column\");\nconst button = cn(\"column\");\n\n@observer\nclass App extends React.Component<any, any> {\n    @observable\n    private primaryRouting: string = \"{\\\"rules\\\":[]}\";\n    @observable\n    private secondaryRouting: string = \"\";\n    @observable\n    private searchQuery: string = \"\";\n    @observable\n    private viewType: string = \"simple\";\n    @observable\n    private difference: RoutingDifference = {\n        sourceFilters: [],\n        rules: [],\n        destinationFilters: []\n    };\n    @observable\n    private mode: string = \"visualizer\";\n\n    private core: Cytoscape.Core | null = null;\n\n    @computed\n    get data(): Cytoscape.ElementDefinition[] {\n        try {\n            return routingToElements(JSON.parse(this.primaryRouting), {\n                searchQuery: this.searchQuery,\n                viewType: this.viewType\n            });\n        } catch (e) {\n            console.log(\"Routing conversion is failed\", e);\n            return [];\n        }\n    }\n\n    @action.bound\n    public onChangeSearchQuery(e: any): void {\n        this.searchQuery = e.target.value;\n    }\n\n    @computed\n    public get isComparatorMode(): boolean {\n        return this.mode === \"comparator\"\n    }\n\n    @computed\n    public get isVisualizerMode(): boolean {\n        return this.mode === \"visualizer\";\n    }\n\n    @action.bound\n    public onChangeViewType(e: any): void {\n        this.viewType = e.target.value;\n        setTimeout(() => {\n            this.updateLayout()\n        }, 500);\n    }\n\n    @action.bound\n    public onPrimaryRoutingChange(e: any): void {\n        this.primaryRouting = e.target.value;\n        this.autoUpdate();\n    }\n\n    @action.bound\n    public onSecondaryRoutingChange(e: any): void {\n        this.secondaryRouting = e.target.value;\n        this.autoUpdateDifference();\n    }\n\n    @action.bound\n    public formatJson(): void {\n        updateRouting(this.primaryRouting).then(model => {\n            this.primaryRouting = JSON.stringify(model, null, 4)\n        }).catch(this.onError);\n        updateRouting(this.secondaryRouting).then(model => {\n            this.secondaryRouting = JSON.stringify(model, null, 4)\n        }).catch(this.onError);\n    }\n\n    @action.bound\n    public simplifyJson(): void {\n        this.primaryRouting = simplifyRouting(this.primaryRouting);\n        this.secondaryRouting = simplifyRouting(this.secondaryRouting);\n    }\n\n    @action.bound\n    public updateDifference(): void {\n        updateRouting(this.primaryRouting).then(lhs => {\n            updateRouting(this.secondaryRouting).then(rhs => {\n                this.difference = buildRoutingDifference(lhs, rhs);\n            }).catch(this.onError);\n        }).catch(this.onError);\n    }\n\n    @action.bound\n    public onError(error: any): void {\n        console.error(\"An error occurred\", error);\n    }\n\n    @action.bound\n    public updateLayout(): void {\n        const layout = this.core?.layout({\n            name: 'cose-bilkent',\n            idealEdgeLength: 250 as any,\n            animate: 'end' as any,\n            animationEasing: 'ease-out' as any,\n            animationDuration: 1000,\n            randomize: true\n        });\n        layout?.run();\n    }\n\n    @action.bound\n    public changeMode(mode: string) {\n        this.mode = mode;\n        this.autoUpdate();\n    }\n\n    public render() {\n        const elements = this.data;\n        return (\n            <div className=\"app\">\n                <div className=\"section\">\n                    <h1 className=\"title\">SOLAR Routing Viewer</h1>\n                    <h2 className=\"subtitle\">\n                        Copy the \"routing.json\" file into the text field to show routing graph\n                    </h2>\n                </div>\n                <div className=\"section\">\n                    <div className=\"tabs is-toggle is-fullwidth is-toggle-rounded\">\n                        <ul>\n                            <li className={modifier(\"\", {\"is-active\": this.isComparatorMode})}>\n                                <a href=\"#\" onClick={() => this.changeMode(\"comparator\")}>\n                                    <span className=\"icon is-small\">\n                                          <FontAwesomeIcon icon={faStream}/>\n                                    </span>\n                                    <span>Routing Comparator</span>\n                                </a>\n                            </li>\n                            <li className={modifier(\"\", {\"is-active\": this.isVisualizerMode})}>\n                                <a href=\"#\" onClick={() => this.changeMode(\"visualizer\")}>\n                                    <span className=\"icon is-small\">\n                                          <FontAwesomeIcon icon={faImage}/>\n                                    </span>\n                                    <span>Routing Visualizer</span>\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"columns\">\n                        <div className={column(\"\", {\"is-one-third\": this.isVisualizerMode})}>\n                            <div className=\"card has-equal-height\">\n                                <header className=\"card-header\">\n                                    <p className=\"card-header-title\">\n                                        Primary \"routing.json\"\n                                    </p>\n                                    <div className=\"card-header-icon\">\n                                        <div className=\"buttons\">\n                                            <button className=\"button is-warning is-small\" onClick={this.formatJson}>\n                                                <span className=\"icon is-small\">\n                                                    <FontAwesomeIcon icon={faPencilAlt}/>\n                                                </span>\n                                                <span>Format</span>\n                                            </button>\n                                            <button className=\"button is-primary is-small\" onClick={this.simplifyJson}>\n                                                <span className=\"icon is-small\">\n                                                    <FontAwesomeIcon icon={faMagic}/>\n                                                </span>\n                                                <span>Simplify</span>\n                                            </button>\n                                        </div>\n                                    </div>\n                                </header>\n                                <div className=\"card-content\">\n                                    <div className=\"content\">\n                                        <textarea className=\"textarea\" onChange={this.onPrimaryRoutingChange}\n                                                  value={this.primaryRouting} spellCheck={false}/>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n                        {this.isComparatorMode && (<div className=\"column is-fullheight\">\n                                <div className=\"card has-equal-height\">\n                                    <header className=\"card-header\">\n                                        <p className=\"card-header-title\">\n                                            Secondary \"routing.json\"\n                                        </p>\n                                        <div className=\"card-header-icon\">\n                                            <div className=\"buttons\">\n                                                <button className=\"button is-warning is-small\"\n                                                        onClick={this.formatJson}>\n                                                <span className=\"icon is-small\">\n                                                    <FontAwesomeIcon icon={faPencilAlt}/>\n                                                </span>\n                                                    <span>Format</span>\n                                                </button>\n                                                <button className=\"button is-primary is-small\"\n                                                        onClick={this.simplifyJson}>\n                                                    <span className=\"icon is-small\">\n                                                        <FontAwesomeIcon icon={faMagic}/>\n                                                    </span>\n                                                    <span>Simplify</span>\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </header>\n                                    <div className=\"card-content\">\n                                        <div className=\"content\">\n                                        <textarea className=\"textarea\" onChange={this.onSecondaryRoutingChange}\n                                                  value={this.secondaryRouting} spellCheck={false}/>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                        {this.isVisualizerMode && (<div className=\"column\">\n                                <div className=\"card has-equal-height\">\n                                    <header className=\"card-header\">\n                                        <p className=\"card-header-title\">\n                                            Visualization\n                                        </p>\n                                        <div className=\"card-header-icon\">\n                                            <div className=\"field has-addons\">\n                                                <div className=\"control\">\n                                                    <div className=\"select is-small\">\n                                                        <select onChange={this.onChangeViewType} value={this.viewType}>\n                                                            <option value=\"simple\">Simple</option>\n                                                            <option value=\"complex\">Complex</option>\n                                                        </select>\n                                                    </div>\n                                                </div>\n                                                <div className=\"control\">\n                                                    <input type=\"text\" className=\"input is-small\"\n                                                           placeholder=\"Search query...\"\n                                                           onChange={this.onChangeSearchQuery}\n                                                           value={this.searchQuery}/>\n                                                </div>\n                                                <div className=\"control\">\n                                                    <button className=\"button is-danger is-small\"\n                                                            onClick={this.updateLayout}>\n                                                        <span className=\"icon is-small\">\n                                                            <FontAwesomeIcon icon={faSync}/>\n                                                        </span>\n                                                        <span>Refresh</span>\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </header>\n                                    <div className=\"card-content\">\n                                        <div className=\"content\">\n                                            <CytoscapeComponent elements={elements} stylesheet={stylesheet}\n                                                                className=\"graph\"\n                                                                cy={this.setCore}/>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n                {this.isComparatorMode && (\n                    <div className=\"section\">\n                        <div className=\"columns is-multiline\">\n                            <div className=\"column is-12\">\n                                <DifferenceTable title=\"Source Filters\" difference={this.difference.sourceFilters}\n                                                 renderItem={this.renderFilter}\n                                                 onMerge={this.mergeSourceFilter}/>\n                            </div>\n                            <div className=\"column is-12\">\n                                <DifferenceTable title=\"Rules\" difference={this.difference.rules}\n                                                 renderItem={this.renderRule}\n                                                 onMerge={this.mergeRule}/>\n                            </div>\n                            <div className=\"column is-12\">\n                                <DifferenceTable title=\"Destination Filters\"\n                                                 difference={this.difference.destinationFilters}\n                                                 renderItem={this.renderFilter}\n                                                 onMerge={this.mergeDestinationFilter}/>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    private renderTag(label: string, value: string, style: string) {\n        return (\n            <div className=\"control\">\n                <div className=\"tags has-addons\">\n                    <span className=\"tag\">{label}</span>\n                    <span className={\"tag is-\" + style}>{value}</span>\n                </div>\n            </div>\n        )\n    }\n\n    @action.bound\n    private renderFilter(filter?: NamedFilter) {\n        return (\n            <div className=\"field is-grouped is-grouped-multiline\">\n                {filter?.name && (\n                    this.renderTag(\"adapter\", filter.name, \"info\")\n                )}\n                {filter?.body && filter?.body.map((item, index) => (\n                    <div className=\"control\" key={index}>\n                        <div className=\"tags has-addons\">\n                            <span className={\"tag is-warning\"}>{item.requests.join(\", \")}</span>\n                            <span className={\"tag is-filter\"}>{item.filters.join(\", \")}</span>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        )\n    }\n\n    @action.bound\n    private renderRule(rule?: Rule) {\n        return (\n            <div className=\"field is-grouped is-grouped-multiline\">\n                {rule?.group && (\n                    this.renderTag(\"group\", rule.group, \"group\")\n                )}\n                {rule?.request && (\n                    this.renderTag(\"request\", rule.request, \"warning\")\n                )}\n                {rule?.source && (\n                    this.renderTag(\"source\", rule.source, \"info\")\n                )}\n                {rule?.destination && (\n                    this.renderTag(\"destination\", rule.destination, \"info\")\n                )}\n                {rule?.application && (\n                    this.renderTag(\"application\", rule.application, \"danger\")\n                )}\n            </div>\n        )\n    }\n\n    private autoUpdate() {\n        this.autoUpdateLayout();\n        this.autoUpdateDifference();\n    }\n\n    private autoUpdateLayout() {\n        if (this.isVisualizerMode) {\n            setTimeout(() => {\n                this.updateLayout()\n            }, 500);\n        }\n    }\n\n    private autoUpdateDifference() {\n        if (this.isComparatorMode) {\n            this.updateDifference()\n        }\n    }\n\n    @action.bound\n    private mergeSourceFilter(diff: Difference<NamedFilter>) {\n        if (diff.left) {\n            updateRouting(this.secondaryRouting).then(model => {\n                this.secondaryRouting = addSourceFilter(model, diff.left!)\n            }).catch(this.onError);\n        } else if (diff.right) {\n            updateRouting(this.primaryRouting).then(model => {\n                this.primaryRouting = addSourceFilter(model, diff.right!)\n            }).catch(this.onError);\n        }\n        this.autoUpdate();\n    }\n\n    @action.bound\n    private mergeRule(diff: Difference<Rule>) {\n        if (diff.left) {\n            updateRouting(this.secondaryRouting).then(model => {\n                this.secondaryRouting = addRule(model, diff.left!)\n            }).catch(this.onError);\n        } else if (diff.right) {\n            updateRouting(this.primaryRouting).then(model => {\n                this.primaryRouting = addRule(model, diff.right!)\n            }).catch(this.onError);\n        }\n        this.autoUpdate();\n    }\n\n    @action.bound\n    private mergeDestinationFilter(diff: Difference<NamedFilter>) {\n        if (diff.left) {\n            updateRouting(this.secondaryRouting).then(model => {\n                this.secondaryRouting = addDestinationFilter(model, diff.left!)\n            }).catch(this.onError);\n        } else if (diff.right) {\n            updateRouting(this.primaryRouting).then(model => {\n                this.primaryRouting = addDestinationFilter(model, diff.right!)\n            }).catch(this.onError);\n        }\n        this.autoUpdate();\n    }\n\n    @action.bound\n    private setCore(core: Cytoscape.Core) {\n        this.core = core\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.scss';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById('root') as Element;\nReactDOM.render(<App/>, root);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}